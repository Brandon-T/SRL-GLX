{*
    This file contains all functions relating to the RS3 Interfaces.
    This file currently contains an API for the following interfaces:

      - TActionBar:     API for interacting and retrieving information for the Action Bar.
      - TControlPanel:  API for retrieving information about gametabs and settings.
      - TGameTab:       API for interacting and retrieving information about the various game interfaces -- Skills, Inventory, Equipment, etc.
      - TSkillTab:      API for retrieving skill information -- Level, XP To Next Level, Remaining XP, Max Level, Current Level, etc..
*}

{$include_once Internals.Simba}
{$include_once Mouse.Simba}
{$include_once Inventory.Simba}
{$include_once Text.Simba}

type TActionBar = record
  None: Boolean;
end;

type TControlPanel = record
  None: Boolean;
end;

type TGameTab = record
  None: Boolean;
end;

type TSkillTab = record
  None: Boolean;
end;

type TControlPanelI = (CP_HERO, CP_GEAR, CP_ADVENTURES, CP_POWERS, CP_SOCIAL, CP_EXTRAS, CP_HELP, CP_OPTIONS);
type TGameTabI = (GT_SKILLS, GT_ACTIVETASK, GT_BACKPACK, GT_EQUIPMENT, GT_ACTIVE_TASK, GT_PRAYER, GT_MAGIC, GT_MELEE, GT_RANGED, GT_DEFENCE, GT_FRIENDS, GT_FRIENDS_CHAT, GT_CLAN_CHAT, GT_NOTES, GT_MUSIC);
type GL_SKILL_LEVEL = (SKILL_ATTACK, SKILL_CONSTITUTION, SKILL_MINING, SKILL_STRENGTH, SKILL_AGILITY, SKILL_SMITHING, SKILL_DEFENCE, SKILL_HERBLORE, SKILL_FISHING, SKILL_RANGED, SKILL_THIEVING, SKILL_COOKING, SKILL_PRAYER, SKILL_CRAFTING, SKILL_FIREMAKING, SKILL_MAGIC, SKILL_FLETCHING, SKILL_WOODCUTTING, SKILL_RUNECRAFTING, SKILL_SLAYER, SKILL_FARMING, SKILL_CONSTRUCTION, SKILL_HUNTER, SKILL_SUMMONING, SKILL_DUNGEONEERING, SKILL_DIVINATION);


{*
  Returns a bounding-box around the action bar.

  Developer Info:
    3084480 = TextureID of the Action Bar's background.
*}
Function TActionBar.GetBounds: TBox;
var
  T: glTextureArray;
  controlPanel: TControlPanel;
  Areas: TBoxArray;
  I: Integer;
Begin
  Result := IntToBox(-1, -1, -1, -1);

  T := glGetTextures(3084480);
  For I := 0 To High(T) Do
  Begin
    If (controlPanel.GetBounds().Contains(T[I].StableBounds().MidPoint())) Then
      Continue;

    SetLength(Areas, Length(Areas) + 1);
    Areas[High(Areas)] := T[I].Bounds;
  End;

  If Length(Areas) > 0 Then
    Result := Areas.Bounds;
End;

{*
  Returns whether or not the action bar is minimised.

  Developer Info:
    28793 - TextureID of the switch-arrow-number icon on the action bar when not minimised.
*}
Function TActionBar.IsMinimised: Boolean;
Begin
  Result := Length(glGetTextures(28793, 2826252, 10, Self.GetBounds)) < 1;
End;

{*
  Minimises/Hides the action bar if it is showing fully.

  Developer Info:
    11475 - TextureID of the minimise icon on the action bar.
*}
Procedure TActionBar.Minimise;
var
  T: glTextureArray;
Begin
  T := glGetTextures(11475);
  If ((Length(T) > 0) And (Not Self.IsMinimised)) Then
    MouseBox(T[0].Bounds, MOUSE_LEFT);
End;

{*
  Maximises/Shows the action bar if it is not showing fully.

  Developer Info:
    11475 - TextureID of the minimise icon on the action bar.
*}
Procedure TActionBar.Maximise;
var
  T: glTextureArray;
Begin
  T := glGetTextures(11475);
  If ((Length(T) > 0) And (Self.IsMinimised)) Then
    MouseBox(T[0].Bounds, MOUSE_LEFT);
End;

{*
  Returns whether or not the action bar is locked.

  Developer Info:
    7750    - TextureID of the lock icon on the action bar.
    7623181 - Colour ID of the action bar padlock when locked.
*}
Function TActionBar.IsLocked: Boolean;
Begin
  Result := Length(glGetTextures(7750, 7623181, 2)) > 0;
End;

{*
  Retrieves the text of the specified texture on the action bar.
*}
Function TActionBar.TextAt(Texture: glTexture): String;
var
  TB: TBox;
Begin
  If (Not Self.GetBounds().Contains(Texture.Bounds.MidPoint())) Then
    Exit;

  TB.X1 := Texture.Bounds.X2;
  TB.Y1 := Texture.Bounds.Y1;
  TB.X2 := TB.X1 + 90;
  TB.Y2 := TB.Y1 + 15;
  Result := glCharsToText(glGetChars(TB), 5, 5)[0];
End;

{*
  Retrurns the current HP level from the action bar.

  Developer Info:
    27185    - TextureID of the HP Icon on the action bar.
*}
Function TActionBar.GetHP: Integer;
var
  Text: String;
  T: glTextureArray;
Begin
  Result := -1;
  T := glGetTextures(27185);
  If (Length(T) > 0) Then
  Begin
    Text := Self.TextAt(T[0]);
    Result := StrToIntDef(Copy(Text, 0, PosEx('/', Text, 1) - 1), -1);
  End;
End;

{*
  Returns the Max HP level from the action bar.

  Developer Info:
    27185    - TextureID of the HP Icon on the action bar.
*}
Function TActionBar.GetMaxHP: Integer;
var
  Text: String;
  T: glTextureArray;
Begin
  Result := -1;
  T := glGetTextures(27185);
  If (Length(T) > 0) Then
  Begin
    Text := Self.TextAt(T[0]);
    Result := StrToIntDef(Copy(Text, PosEx('/', Text, 1) + 1, 20), -1);
  End;
End;

{*
  Returns whether the current player is poisoned or not.

  Developer Info:
    27185    - TextureID of the HP Icon (heart) on the action bar.
    4395016  - ColourID of the action bar's health icon when not poisoned.
*}
Function TActionBar.IsPoisoned: Boolean;
Begin
  Result := Length(glGetTextures(27185, 4395016, 5)) < 1;
End;

{*
  Returns the Current Adrenaline level from the action bar.

  Developer Info:
    27966    - TextureID of the Adrenaline Icon on the action bar.
*}
Function TActionBar.GetAdrenaline: Integer;
var
  Text: String;
  T: glTextureArray;
Begin
  Result := -1;
  T := glGetTextures(27966);
  If (Length(T) > 0) Then
  Begin
    Text := Self.TextAt(T[0]);
    Result := StrToIntDef(Copy(Text, 0, PosEx('%', Text, 1) - 1), -1);
  End;
End;

{*
  Returns the Current Prayer level from the action bar.

  Developer Info:
    21070    - TextureID of the Prayer Icon on the action bar.
*}
Function TActionBar.GetPrayer: Integer;
var
  Text: String;
  T: glTextureArray;
Begin
  Result := -1;
  T := glGetTextures(21070);
  If (Length(T) > 0) Then
  Begin
    Text := Self.TextAt(T[0]);
    Result := StrToIntDef(Copy(Text, 0, PosEx('/', Text, 1) - 1), -1);
  End;
End;

{*
  Returns the Max Prayer level from the action bar.

  Developer Info:
    21070    - TextureID of the Prayer Icon on the action bar.
*}
Function TActionBar.GetMaxPrayer: Integer;
var
  Text: String;
  T: glTextureArray;
Begin
  Result := -1;
  T := glGetTextures(21070);
  If (Length(T) > 0) Then
  Begin
    Text := Self.TextAt(T[0]);
    Result := StrToIntDef(Copy(Text, PosEx('/', Text, 1) + 1, 20), -1);
  End;
End;

{*
  Returns the Current Summoning level from the action bar.

  Developer Info:
    28704    - TextureID of the Summoning Icon on the action bar.
*}
Function TActionBar.GetSummoning: Integer;
var
  Text: String;
  T: glTextureArray;
Begin
  Result := -1;
  T := glGetTextures(28704);
  If (Length(T) > 0) Then
  Begin
    Text := Self.TextAt(T[0]);
    Result := StrToIntDef(Copy(Text, 0, PosEx('/', Text, 1) - 1), -1);
  End;
End;

{*
  Returns the Max Summoning level from the action bar.

  Developer Info:
    28704    - TextureID of the Summoning Icon on the action bar.
*}
Function TActionBar.GetMaxSummoning: Integer;
var
  Text: String;
  T: glTextureArray;
Begin
  Result := -1;
  T := glGetTextures(28704);
  If (Length(T) > 0) Then
  Begin
    Text := Self.TextAt(T[0]);
    Result := StrToIntDef(Copy(Text, PosEx('/', Text, 1) + 1, 20), -1);
  End;
End;

{*
  Returns the Bounding-Box of the Control Panel (Interface containing Hero, Settings, Skills, Equipment).

  Developer Info:
    3084480    - TextureID of the Control Panel's background.
    163200     - TextureID of the Background of each button.
    2413       - TextureID of the customisation button.
*}
Function TControlPanel.GetBounds: TBox;
var
  Background, Icons: glTextureArray;
  TBA: TBoxArray;
  I, J: Integer;
Begin
  Result := IntToBox(-1, -1, -1, -1);
  Background := glGetTextures(3084480);
  Icons := glGetTextures([163200, 2413]);

  For I := 0 To High(Background) Do
    For J := 0 To High(Icons) Do
    Begin
      If (PointInBox(Point(Icons[J].X, Icons[J].Y), Background[I].Bounds)) Then
      Begin
        SetLength(TBA, Length(TBA) + 1);
        TBA[High(TBA)] := Background[I].Bounds;
        Break;
      End;
    End;

  If (Length(TBA) > 0) Then
    Exit(TBA.Bounds);
End;

{*
  Returns the Bounding-Box of the specified Control Panel Button.

  Developer Info:
    IDs       - TextureIDs of HERO, GEAR, ADVENTURES, POWERS, SOCIAL, EXTRAS, HELP, OPTIONS.. in that order.
    ColourIDs - ColourIDs of the corresponding IDs above.
*}
Function TControlPanel.GetBounds(CPI: TControlPanelI): TBox; overload;
var
  T: glTextureArray;
  IDs: TIntegerArray;
  ColourIDs: TIntegerArray;
Begin
  IDs       := [84844,   88549,   86189,   101389,  131432,  109661,  116281,  86205];
  ColourIDs := [3815212, 2767934, 5261370, 5984147, 4080169, 4660740, 2438974, 5259553];
  T := glGetTextures(IDs[Ord(CPI)], ColourIDs[Ord(CPI)], 5, Self.GetBounds);
  If (Length(T) > 0) Then
    Result := T[0].Bounds
  Else
    Result := IntToBox(-1, -1, -1, -1);
End;

{*
  Returns the Bounding-Box of the specified GameTab Button on the ControlPanel
  if the interface is NOT Open/Active.

  Developer Info:
    IDs       - TextureIDs of the following:
                  SKILLS, ACTIVETASK, BACKPACK, EQUIPMENT, ACTIVE_TASK, PRAYER, MAGIC, MELEE,
                  RANGED, DEFENCE, FRIENDS, FRIENDS_CHAT, CLAN_CHAT, NOTES, MUSIC.. In that Order.

    ColourIDs - ColourIDs of the corresponding ControlPanel extension buttons above when NOT Open.

    Notes     - The ColourIDs are not necessary but just there..
*}
Function TGameTab.GetOpenBounds(GTI: TGameTabI): TBox;
var
  T: glTextureArray;
  IDs: TIntegerArray;
  ColourIDs: TIntegerArray;
Begin
  IDs       := [29354,   23053,  36941,   21381,   23053,  10821,    35277,   15430,   13142,   30895,   39299,   35316,   33429,   {21613,}   29730,   29105];    //21613 - twitch streaming
  ColourIDs := [2170141, 922372, 2561806, 1776153, 922372, 12314109, 1449002, 1446411, 1446926, 4070940, 3158550, 3290125, 4142349, {1671422,} 4076577, 3747617];  //1671422 - twitch streaming
  T := glGetTextures(IDs[Ord(GTI)], ColourIDs[Ord(GTI)], 5);
  If (Length(T) > 0) Then
    Result := T[0].Bounds
  Else
    Result := IntToBox(-1, -1, -1, -1);
End;

{*
  Returns the Bounding-Box of the specified GameTab Button on the ControlPanel
  if the interface IS Open/Active.

  Developer Info:
    IDs       - TextureIDs of the following:
                  SKILLS, ACTIVETASK, BACKPACK, EQUIPMENT, ACTIVE_TASK, PRAYER, MAGIC, MELEE,
                  RANGED, DEFENCE, FRIENDS, FRIENDS_CHAT, CLAN_CHAT, NOTES, MUSIC.. In that Order.

    ColourIDs - ColourIDs of the corresponding ControlPanel extension buttons above when Open.

    Notes     - The ColourIDs are not necessary but just there..
*}
Function TGameTab.GetCloseBounds(GTI: TGameTabI): TBox;
var
  T: glTextureArray;
  IDs: TIntegerArray;
  ColourIDs: TIntegerArray;
Begin
  IDs       := [20036,   15729,   22326,   14582,   15729,   7383,    24074,   10528,   8966,    21082,   26815,   21257,   19996,   {-0,} 20284,   19860];          //-0 = twitch place-holder
  ColourIDs := [3552823, 2105376, 3026479, 2631720, 2105376, 3355443, 3750201, 1907998, 1973791, 3815995, 4144959, 3289650, 3289650, {-0,} 3881788, 3815995];      //-0 = twitch place-holder
  T := glGetTextures(IDs[Ord(GTI)], ColourIDs[Ord(GTI)], 5);
  If (Length(T) > 0) Then
    Result := T[0].Bounds
  Else
    Result := IntToBox(-1, -1, -1, -1);
End;

{*
  Returns the Bounding-Box of the specified GameTab Button on the ControlPanel
  regardless of whether it is Open or Closed.
*}
Function TGameTab.GetBounds(GTI: TGameTabI): TBox;
Begin
  Result := Self.GetOpenBounds(GTI);
  If ((Result.X1 = -1) and (Result.Y1 = -1) and (Result.X2 = -1) and (Result.Y2 = -1)) Then
    Result := Self.GetCloseBounds(GTI);
End;

{*
  Returns the Current Visible/Active GameTab.

  Developer Info:
    IDs       - TextureIDs of the following:
                  SKILLS, ACTIVETASK, BACKPACK, EQUIPMENT, ACTIVE_TASK, PRAYER, MAGIC, MELEE,
                  RANGED, DEFENCE, FRIENDS, FRIENDS_CHAT, CLAN_CHAT, NOTES, MUSIC

    155923    - TextureID of the Active Tab Icon.
    1385001   - ColourID of the Active Tab Icon.
*}
Function TGameTab.CurrentTab: TGameTabI;
var
  B: TBox;
  IDs: TIntegerArray;
  Tab: glTextureArray;
Begin
  Result := -1;
  B := GL_InvBounds;
  IDs := [29354,   23053,  36941,   21381,   23053,  10821,    35277,   15430,   13142,   30895,   39299,   35316,   33429,   {21613,}   29730,   29105];    //21613 - twitch streaming
  Tab := glGetTextures(155923, 1385001, 10, IntToBox(B.X1, B.Y1 - 30, B.X2, B.Y1 - 3));

  If (Length(Tab) > 0) Then
  Begin
    Tab := glGetTextures(IDs, Tab[0].Bounds);
    if (length(tab) > 0) then
      Result := IDs.IndexOf(Tab[0].ID);
  End;
End;

{*
  Returns the an array containing all VISIBLE GameTab Tabs (Tabs not hidden by the scroll bar).

  Developer Info:
    IDs       - TextureIDs of the following:
                  SKILLS, ACTIVETASK, BACKPACK, EQUIPMENT, ACTIVE_TASK, PRAYER, MAGIC, MELEE,
                  RANGED, DEFENCE, FRIENDS, FRIENDS_CHAT, CLAN_CHAT, NOTES, MUSIC

    109148    - TextureID of the In-Active Tab Icons.
    659217   - ColourID of the In-Active Tab Icons.
    155923    - TextureID of the Active Tab Icon.
    1385001   - ColourID of the Active Tab Icon
*}
Function TGameTab.VisibleTabs: Array of TGameTabI;
var
  I: Integer;
  B: TBox;
  IDs: TIntegerArray;
  Tabs: glTextureArray;
Begin
  B := GL_InvBounds;
  IDs := [29354,   23053,  36941,   21381,   23053,  10821,    35277,   15430,   13142,   30895,   39299,   35316,   33429,   {21613,}   29730,   29105];    //21613 - twitch streaming
  Tabs := glGetTextures([109148, 155923], [659217, 1385001], [10, 10], IntToBox(B.X1, B.Y1 - 30, B.X2, B.Y1 - 3));
  If (Length(Tabs) > 0) Then
  Begin
    B := IntToBox(Tabs[0].Bounds.X1, Tabs[0].Bounds.Y1, Tabs[High(Tabs)].Bounds.X2, Tabs[High(Tabs)].Bounds.Y2);
    Tabs := glGetTextures(IDs, B);
    SetLength(Result, Length(Tabs));

    For I := 0 To High(Tabs) Do
      Result[I] := IDs.IndexOf(Tabs[I].ID);
  End;
End;

{*
  Returns whether it successfully activated the specified GameTab.

  Developer Info:
    IDs       - TextureIDs of the following:
                  SKILLS, ACTIVETASK, BACKPACK, EQUIPMENT, ACTIVE_TASK, PRAYER, MAGIC, MELEE,
                  RANGED, DEFENCE, FRIENDS, FRIENDS_CHAT, CLAN_CHAT, NOTES, MUSIC

    109148    - TextureID of the In-Active Tab Icons.
    659217   - ColourID of the In-Active Tab Icons.
    155923    - TextureID of the Active Tab Icon.
    1385001   - ColourID of the Active Tab Icon
*}
Function TGameTab.Activate(GTI: TGameTabI): Boolean;
var
  I: Integer;
  B: TBox;
  IDs: TIntegerArray;
  Tabs: glTextureArray;
Begin
  Result := False;
  B := GL_InvBounds;
  IDs := [29354,   23053,  36941,   21381,   23053,  10821,    35277,   15430,   13142,   30895,   39299,   35316,   33429,   {21613,}   29730,   29105];    //21613 - twitch streaming
  Tabs := glGetTextures([109148, 155923], [659217, 1385001], [10, 10], IntToBox(B.X1, B.Y1 - 30, B.X2, B.Y1 - 3));
  If (Length(Tabs) > 0) Then
  Begin
    B := IntToBox(Tabs[0].Bounds.X1, Tabs[0].Bounds.Y1, Tabs[High(Tabs)].Bounds.X2, Tabs[High(Tabs)].Bounds.Y2);
    Tabs := glGetTextures(IDs[Ord(GTI)], B);

    For I := 0 To High(Tabs) Do
      If (IDs.IndexOf(Tabs[I].ID) = GTI) Then
      Begin
        MouseBox(Tabs[I].Bounds, MOUSE_LEFT);
        Result := True;
        Exit;
      End;
  End;
End;

{*
  Opens a specified GameTab if not Active or Visible.
*}
Function TGameTab.Open(GTI: TGameTabI): Boolean;
var
  B: TBox;
  T: Timer;
  CP: TControlPanel;
Begin
  Result := Self.Activate(GTI);
  If (Result) Then
    Exit;

  MouseBox(B, MOUSE_MOVE);

  T.Start();
  While(T.TimeElapsed < 2500) Do
  Begin
    B := Self.GetOpenBounds(GTI);
    If ((B.X1 <> -1) And (B.Y1 <> -1) And (B.X2 <> -1) And (B.Y2 <> -1)) Then
    Begin
      MouseBox(B, MOUSE_LEFT);
      Result := True;
      Exit;
    End;
  End;
End;

{*
  Closes the specified GameTab if Visible.
*}
Function TGameTab.Close(GTI: TGameTabI): Boolean;
Begin
End;

{*
  Returns the Bounding-Box of a specified skill on the Skills GameTab.

  Developer Info:
    224744  - TextureID of the skill background.
*}
Function TSkillTab.GetSkillBounds(SKILL: GL_SKILL_LEVEL): TBox;
var
  I: Integer;
  Text: glTextArray;
  T: glTextureArray;
Begin
  Result := IntToBox(-1, -1, -1, -1);
  T := glGetTextures(224744, GL_InvBounds);
  If ((SKILL >= 0) and (SKILL <= Length(T)) and (Length(T) > 0)) Then
    Result := T[Ord(SKILL)].Bounds;
End;

{*
  Returns the Current level of the specified skill from the Skills GameTab.
  Example:
    Attack Skill - 24/36.  <-- Returns 24.
*}
Function TSkillTab.GetSkillLevel(SKILL: GL_SKILL_LEVEL): Integer;
var
  I: Integer;
  B: TBox;
  Text: glTextArray;
Begin
  Result := -1;
  B := Self.GetSkillBounds(SKILL);
  If ((B.X1 <> -1) and (B.Y1 <> -1) and (B.X2 <> -1) and (B.Y2 <> -1)) Then
  Begin
    Text := glCharsToTexts(glGetChars(B), 5, 7);
    If (Length(Text) >= 2) Then
      Result := StrToIntDef(Trim(Text[0].Text), -1);
  End;
End;

{*
  Returns the Maximum level of the specified skill from the Skills GameTab.
  Example:
    Attack Skill - 24/36.  <-- Returns 36.
*}
Function TSkillTab.GetMaxSkillLevel(SKILL: GL_SKILL_LEVEL): Integer;
var
  I: Integer;
  B: TBox;
  Text: glTextArray;
Begin
  Result := -1;
  B := Self.GetSkillBounds(SKILL);
  If ((B.X1 <> -1) and (B.Y1 <> -1) and (B.X2 <> -1) and (B.Y2 <> -1)) Then
  Begin
    Text := glCharsToTexts(glGetChars(B), 5, 7);
    If (Length(Text) >= 2) Then
      Result := StrToIntDef(Trim(Text[1].Text), -1);
  End;
End;

{*
  Returns an array of strings containing information about a specified skill.

  Example (For the Attack skill, it can return):

    [Attack    - 34/34]
    [CurrentXP - 21,834]
    [NextLevel - 22,406]
    [Remainder - 502]
*}
Function TSkillTab.GetSkillInfo(SKILL: GL_SKILL_LEVEL): TStringArray;
var
  B: TBox;
  I: Integer;
  glChars: glCharArray;
Begin
  B := Self.GetSkillBounds(SKILL);
  If ((B.X1 <> -1) and (B.Y1 <> -1) and (B.X2 <> -1) and (B.Y2 <> -1)) Then
  Begin
    MouseBox(B, MOUSE_MOVE);
    glChars := glGetChars(GL_UptextBounds);
    If (Length(glChars) > 0) then
      Result := glCharsToText(glChars, 3, 5);

    If (Length(Result) > 7) Then
    Begin
      Result[0] := Trim(Result[4]);
      Result[1] := Trim(Result[5]);
      Result[2] := Trim(Result[6]);
      Result[3] := Trim(Result[7]);

      If (PosEx('skill', Result[0], 1) > 0) Then
      Begin
        Result[4] := Trim(Result[8]);
        SetLength(Result, 5);
      End Else
        SetLength(Result, 4);
      Exit;
    End;
  End;
End;

{*
  Returns Current amount of XP the player has for the specified skill.
*}
Function TSkillTab.GetCurrentXP(SKILL: GL_SKILL_LEVEL): Integer;
var
  Info: TStringArray;
Begin
  Result := -1;
  Info := Self.GetSkillInfo(SKILL);
  If (Length(Info) >= 2) Then
  Begin
    If (PosEx('skill', Info[0], 1) > 0) Then
      Result := StrToIntDef(ExtractFromStr(Info[2], NUMBERS), -1)
    Else
      Result := StrToIntDef(ExtractFromStr(Info[1], NUMBERS), -1);
  End;
End;

{*
  Returns amount of XP required for the player to achieve the next level in
  the specified skill.
*}
Function TSkillTab.GetNextLevelXP(SKILL: GL_SKILL_LEVEL): Integer;
var
  Info: TStringArray;
Begin
  Result := -1;
  Info := Self.GetSkillInfo(SKILL);
  If (Length(Info) >= 3) Then
  Begin
    If (PosEx('skill', Info[0], 1) > 0) Then
      Result := StrToIntDef(ExtractFromStr(Info[3], NUMBERS), -1)
    Else
      Result := StrToIntDef(ExtractFromStr(Info[2], NUMBERS), -1);
  End;
End;

{*
  Returns amount of XP remaining until the player achieves the next level in
  the specified skill.
*}
Function TSkillTab.GetRemainingXP(SKILL: GL_SKILL_LEVEL): Integer;
var
  Info: TStringArray;
Begin
  Result := -1;
  Info := Self.GetSkillInfo(SKILL);
  If (Length(Info) >= 4) Then
  Begin
    If (PosEx('skill', Info[0], 1) > 0) Then
      Result := StrToIntDef(ExtractFromStr(Info[4], NUMBERS), -1)
    Else
      Result := StrToIntDef(ExtractFromStr(Info[3], NUMBERS), -1);
  End;
End;

function GL_GetAllInterfaceBounds(): TBoxArray;
type
  TBoundPoint = record
    ID: Integer;
    p: TPoint;
    b: TBox;
  end;
  TBoundPointArray = array of TBoundPoint;
  function GLArrToTBoundsTPAArray(res: glTextureArray): TBoundPointArray;
  var i: Integer;
  begin
    SetLength( Result, Length( res ) );
    for i := 0 to High( res ) do
    begin
      Result[i].ID := res[i].ID;
      Result[i].p := Point( res[i].X, res[i].Y );
      Result[i].b := res[i].Bounds;
    end;
  end;
  procedure calibrateTBoundPoint(var p1, p2: Integer; use_X: Boolean);
  var d, w, h: Integer;
  begin
    GetClientDimensions( w, h );
    if ( use_X ) then d := w else d := h;
    if ( p1 < 0 ) then p1 := 0;
    if ( p2 < 0 ) then p2 := 0;
    if ( p1 >= d ) then p1 := d - 1;
    if ( p2 >= d ) then p2 := d - 1;
  end;
  function isWithinRange(var x1, x2: Integer; const wiggleRoom: Integer; useX: Boolean): Boolean;
  begin
    calibrateTBoundPoint( x1, x2, useX );
    Result := Abs( x2 - x1 ) <= wiggleRoom;
  end;
  function getRectangles(res: TBoundPointArray): TBoxArray;
  var TL, TR, BL, BR: Integer;
  var b: TBox;
  begin
    if ( Length( res ) < 1 ) then
    begin
      Result := [];
      Exit;
    end;
    for TL := 0 to High( res ) do
      for TR := TL + 1 to High( res ) do
        for BL := TR + 1 to High( res ) do
          for BR := BL + 1 to High( res ) do
          begin
            if ( not ( isWithinRange(res[TL].p.X, res[BL].p.X, 9, True) ) ) then Continue;
            if ( not ( isWithinRange(res[TR].p.X, res[BR].p.X, 9, True) ) ) then Continue;
            if ( not ( isWithinRange(res[TL].p.Y, res[TR].p.Y, 9, False) ) ) then Continue;
            if ( not ( isWithinRange(res[BL].p.Y, res[BR].p.Y, 9, False) ) ) then Continue;
            SetLength( Result, Length( Result ) + 1 );
            calibrateTBoundPoint(res[TL].b.X1, res[BR].b.X2, True);
            calibrateTBoundPoint(res[TL].b.Y1, res[BR].b.Y2, False);
            b := IntToBox( res[TL].b.X1, res[TL].b.Y1, res[BR].b.X2, res[BR].b.Y2 );
            // 20400 = texture id that appears on the sides of interfaces
            if ( Length( glGetTextures( 20400, b ) ) <> 2 ) then
            begin
              SetLength( Result, Length( Result ) - 1 );
              Continue;
            end;
            Result[ High( Result ) ] := b;
          end;
  end;
const
  TopLandR = 3060; // Top Left/Right corner texture IDs
  BottomLandR = 28550; // Bottom Left/Right corner texture IDs
var
  TPA: TBoundPointArray;
  gArr: glTextureArray;
begin
  if ( not ( GL_LoggedIn() ) ) then Exit;
  gArr := glGetTextures( [ TopLandR, BottomLandR ] );
  TPA := GLArrToTBoundsTPAArray( gArr );
  Result := getRectangles( TPA );
end;
