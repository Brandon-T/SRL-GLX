{$include_once GLX/Internals.Simba}
{$include_once GLX/Mouse.Simba}
{$include_once GLX/Inventory.Simba}
{$include_once GLX/Text.Simba}

type TActionBar = record
  None: Boolean;
end;

type TControlPanel = record
  None: Boolean;
end;

type TGameTab = record
  None: Boolean;
end;

type TSkillTab = record
  None: Boolean;
end;

type TControlPanelI = (CP_HERO, CP_GEAR, CP_ADVENTURES, CP_POWERS, CP_SOCIAL, CP_EXTRAS, CP_HELP, CP_OPTIONS);
type TGameTabI = (GT_SKILLS, GT_ACTIVETASK, GT_BACKPACK, GT_EQUIPMENT, GT_ACTIVE_TASK, GT_PRAYER, GT_MAGIC, GT_MELEE, GT_RANGED, GT_DEFENCE, GT_FRIENDS, GT_FRIENDS_CHAT, GT_CLAN_CHAT, GT_NOTES, GT_MUSIC);
type GL_SKILL_LEVEL = (SKILL_ATTACK, SKILL_CONSTITUTION, SKILL_MINING, SKILL_STRENGTH, SKILL_AGILITY, SKILL_SMITHING, SKILL_DEFENCE, SKILL_HERBLORE, SKILL_FISHING, SKILL_RANGED, SKILL_THIEVING, SKILL_COOKING, SKILL_PRAYER, SKILL_CRAFTING, SKILL_FIREMAKING, SKILL_MAGIC, SKILL_FLETCHING, SKILL_WOODCUTTING, SKILL_RUNECRAFTING, SKILL_SLAYER, SKILL_FARMING, SKILL_CONSTRUCTION, SKILL_HUNTER, SKILL_SUMMONING, SKILL_DUNGEONEERING, SKILL_DIVINATION);

Function TActionBar.GetBounds: TBox;
var
  T: glTextureArray;
  I: Integer;
  B: TBox;
Begin
  T := glGetTextures(12109440, 1580578, 10);
  For I := 0 To High(T) Do
  Begin
    Result := IntToBox(T[I].Bounds.X1, T[I].Bounds.Y1, T[I + 1].Bounds.X2, T[I + 1].Bounds.Y2);
    If (Length(glGetTextures(3825, 7639970, 10, Result)) > 0) Then //Minimize Button.
      Exit;
  End;
  Result := IntToBox(-1, -1, -1, -1);
End;

Function TActionBar.IsMinimised: Boolean;
Begin
  Result := Length(glGetTextures(6742, 4402694, 10, Self.GetBounds)) < 1;
End;

Procedure TActionBar.Minimise;
var
  T: glTextureArray;
Begin
  T := glGetTextures(3825, 7639970, 10);
  If ((Length(T) > 0) And (Not Self.IsMinimised)) Then
    MouseBox(T[0].Bounds, MOUSE_LEFT);
End;

Procedure TActionBar.Maximise;
var
  T: glTextureArray;
Begin
  T := glGetTextures(3825, 7639970, 10);
  If ((Length(T) > 0) And (Self.IsMinimised)) Then
    MouseBox(T[0].Bounds, MOUSE_LEFT);
End;

Function TActionBar.IsLocked: Boolean;
Begin
  Result := Length(glGetTextures(8528, 7688717, 2)) > 0;
End;

Function TActionBar.TextAt(Texture: glTexture): String;
var
  TB: TBox;
Begin
  TB.X1 := Texture.Bounds.X2;
  TB.Y1 := Texture.Bounds.Y1;
  TB.X2 := TB.X1 + 90;
  TB.Y2 := TB.Y1 + 15;
  Result := glCharsToText(glGetChars(TB), 5, 5)[0];
End;

Function TActionBar.GetHP: Integer;
var
  Text: String;
  T: glTextureArray;
Begin
  Result := -1;
  T := glGetTextures(30894);
  If (Length(T) > 0) Then
  Begin
    Text := Self.TextAt(T[0]);
    Result := StrToIntDef(Copy(Text, 0, PosEx('/', Text, 1) - 1), -1);
  End;
End;

Function TActionBar.GetMaxHP: Integer;
var
  Text: String;
  T: glTextureArray;
Begin
  Result := -1;
  T := glGetTextures(30894);
  If (Length(T) > 0) Then
  Begin
    Text := Self.TextAt(T[0]);
    Result := StrToIntDef(Copy(Text, PosEx('/', Text, 1) + 1, 20), -1);
  End;
End;

Function TActionBar.IsPoisoned: Boolean;
Begin
  Result := Length(glGetTextures(30894, 4591880, 5)) < 1;
End;

Function TActionBar.GetAdrenaline: Integer;
var
  Text: String;
  T: glTextureArray;
Begin
  Result := -1;
  T := glGetTextures(33598);
  If (Length(T) > 0) Then
  Begin
    Text := Self.TextAt(T[0]);
    Result := StrToIntDef(Copy(Text, 0, PosEx('/', Text, 1) - 1), -1);
  End;
End;

Function TActionBar.GetMaxAdrenaline: Integer;
var
  Text: String;
  T: glTextureArray;
Begin
  Result := -1;
  T := glGetTextures(33598);
  If (Length(T) > 0) Then
  Begin
    Text := Self.TextAt(T[0]);
    Result := StrToIntDef(Copy(Text, PosEx('/', Text, 1) + 1, 20), -1);
  End;
End;

Function TActionBar.GetPrayer: Integer;
var
  Text: String;
  T: glTextureArray;
Begin
  Result := -1;
  T := glGetTextures(23579);
  If (Length(T) > 0) Then
  Begin
    Text := Self.TextAt(T[0]);
    Result := StrToIntDef(Copy(Text, 0, PosEx('/', Text, 1) - 1), -1);
  End;
End;

Function TActionBar.GetMaxPrayer: Integer;
var
  Text: String;
  T: glTextureArray;
Begin
  Result := -1;
  T := glGetTextures(23579);
  If (Length(T) > 0) Then
  Begin
    Text := Self.TextAt(T[0]);
    Result := StrToIntDef(Copy(Text, PosEx('/', Text, 1) + 1, 20), -1);
  End;
End;

Function TActionBar.GetSummoning: Integer;
var
  Text: String;
  T: glTextureArray;
Begin
  Result := -1;
  T := glGetTextures(31491);
  If (Length(T) > 0) Then
  Begin
    Text := Self.TextAt(T[0]);
    Result := StrToIntDef(Copy(Text, 0, PosEx('/', Text, 1) - 1), -1);
  End;
End;

Function TActionBar.GetMaxSummoning: Integer;
var
  Text: String;
  T: glTextureArray;
Begin
  Result := -1;
  T := glGetTextures(31491);
  If (Length(T) > 0) Then
  Begin
    Text := Self.TextAt(T[0]);
    Result := StrToIntDef(Copy(Text, PosEx('/', Text, 1) + 1, 20), -1);
  End;
End;

Function TControlPanel.GetBounds: TBox;
var
  T, Icons: glTextureArray;
  I: Integer;
  B: TBox;
Begin
  Result := IntToBox(-1, -1, -1, -1);
  T := glGetTextures(12109440, 1580578, 10);
  For I := 0 To High(T) Do
  Begin
    Icons := glGetTextures(163081, 5065803, 5, T[I].Bounds);
    If (Length(Icons) > 0) Then
    Begin
      Result.X1 := T[I].Bounds.X1;
      Result.Y1 := T[I].Bounds.Y1;
    End;

    Icons := glGetTextures(163081, 6243360, 5, T[I].Bounds);
    If (Length(Icons) > 0) Then
    Begin
      Result.X2 := T[I].Bounds.X2;
      Result.Y2 := T[I].Bounds.Y2;
    End;
  End;
End;

Function TControlPanel.GetBounds(CPI: TControlPanelI): TBox; overload;
var
  T: glTextureArray;
  IDs: TIntegerArray;
  ColourIDs: TIntegerArray;
Begin
  IDs := [163081, 163081, 163081, 163082, 163114, 163137, 163200, 163081];
  ColourIDs := [5065803, 4804684, 6578765, 5395590, 4541232, 7758690, 5987169, 6243360];
  T := glGetTextures(IDs[Ord(CPI)], ColourIDs[Ord(CPI)], 5, Self.GetBounds);
  If (Length(T) > 0) Then
    Result := T[0].Bounds
  Else
    Result := IntToBox(-1, -1, -1, -1);
End;

Function TGameTab.GetOpenBounds(GTI: TGameTabI): TBox;
var
  T: glTextureArray;
  IDs: TIntegerArray;
  ColourIDs: TIntegerArray;
Begin
  IDs := [29354, 23053, 36941, 21381, 23053, 10821, 35277, 15430, 13142, 30895, 39299, 35316, 33429, 29730, 29105];
  ColourIDs := [2104351, 922115, 2496271, 1776411, 92115, 2833221, 1449260, 1380875, 1446670, 4005404, 3158550, 3355404, 4142348, 4076577, 3747873];
  T := glGetTextures(IDs[Ord(GTI)], ColourIDs[Ord(GTI)], 5);
  If (Length(T) > 0) Then
    Result := T[0].Bounds
  Else
    Result := IntToBox(-1, -1, -1, -1);
End;

Function TGameTab.GetCloseBounds(GTI: TGameTabI): TBox;
var
  T: glTextureArray;
  IDs: TIntegerArray;
  ColourIDs: TIntegerArray;
Begin
  IDs := [24018, 17353, 23366, 15882, 23053, 9445, 25818, 12900, 11629, 22132, 28175, 22577, 21369, 21623, 21195];
  ColourIDs := [5000268, 3750201, 4473924, 3815994, 3750201, 3223857, 5131854, 3355443, 3487029, 4737096, 5329233, 4605510, 4473924, 4671303, 4605510];
  T := glGetTextures(IDs[Ord(GTI)], ColourIDs[Ord(GTI)], 5);
  If (Length(T) > 0) Then
    Result := T[0].Bounds
  Else
    Result := IntToBox(-1, -1, -1, -1);
End;

Function TGameTab.GetBounds(GTI: TGameTabI): TBox;
Begin
  Result := Self.GetOpenBounds(GTI);
  If ((Result.X1 = -1) and (Result.Y1 = -1) and (Result.X2 = -1) and (Result.Y2 = -1)) Then
    Result := Self.GetCloseBounds(GTI);
End;

Function TGameTab.CurrentTab: TGameTabI;
var
  B: TBox;
  IDs: TIntegerArray;
  Tab: glTextureArray;
Begin
  Result := -1;
  B := GL_InvBounds;
  IDs := [29354, 23053, 36941, 21381, 23053, 10821, 35277, 15430, 13142, 30895, 39299, 35316, 33429, 29730, 29105];
  Tab := glGetTextures(155923, 1385001, 10, IntToBox(B.X1, B.Y1 - 30, B.X2, B.Y1 - 3));

  If (Length(Tab) > 0) Then
  Begin
    Tab := glGetTextures(IDs, Tab[0].Bounds);
    Result := IDs.IndexOf(Tab[0].ID);
  End;
End;

Function TGameTab.VisibleTabs: Array of TGameTabI;
var
  I: Integer;
  B: TBox;
  IDs: TIntegerArray;
  Tabs: glTextureArray;
Begin
  B := GL_InvBounds;
  IDs := [29354, 23053, 36941, 21381, 23053, 10821, 35277, 15430, 13142, 30895, 39299, 35316, 33429, 29730, 29105];
  Tabs := glGetTextures([154028, 155923], [1186335, 1385001], [10, 10], IntToBox(B.X1, B.Y1 - 30, B.X2, B.Y1 - 3));
  If (Length(Tabs) > 0) Then
  Begin
    B := IntToBox(Tabs[0].Bounds.X1, Tabs[0].Bounds.Y1, Tabs[High(Tabs)].Bounds.X2, Tabs[High(Tabs)].Bounds.Y2);
    Tabs := glGetTextures(IDs, B);
    SetLength(Result, Length(Tabs));

    For I := 0 To High(Tabs) Do
      Result[I] := IDs.IndexOf(Tabs[I].ID);
  End;
End;

Function TGameTab.Activate(GTI: TGameTabI): Boolean;
var
  I: Integer;
  B: TBox;
  IDs: TIntegerArray;
  Tabs: glTextureArray;
Begin
  Result := False;
  B := GL_InvBounds;
  IDs := [29354, 23053, 36941, 21381, 23053, 10821, 35277, 15430, 13142, 30895, 39299, 35316, 33429, 29730, 29105];
  Tabs := glGetTextures([154028, 155923], [1186335, 1385001], [10, 10], IntToBox(B.X1, B.Y1 - 30, B.X2, B.Y1 - 3));
  If (Length(Tabs) > 0) Then
  Begin
    B := IntToBox(Tabs[0].Bounds.X1, Tabs[0].Bounds.Y1, Tabs[High(Tabs)].Bounds.X2, Tabs[High(Tabs)].Bounds.Y2);
    Tabs := glGetTextures(IDs, B);

    For I := 0 To High(Tabs) Do
      If (IDs.IndexOf(Tabs[I].ID) = GTI) Then
      Begin
        MouseBox(Tabs[I].Bounds, MOUSE_LEFT);
        Result := True;
        Exit;
      End;
  End;
End;

Function TGameTab.Open(GTI: TGameTabI): Boolean;
var
  B: TBox;
Begin

End;

Function TGameTab.Close(GTI: TGameTabI): Boolean;
Begin
End;

Function TSkillTab.GetSkillBounds(SKILL: GL_SKILL_LEVEL): TBox;
var
  I: Integer;
  Text: glTextArray;
  T: glTextureArray;
Begin
  Result := IntToBox(-1, -1, -1, -1);
  T := glGetTextures(224744, GL_InvBounds);
  If ((SKILL >= 0) and (SKILL <= Length(T)) and (Length(T) > 0)) Then
    Result := T[Ord(SKILL)].Bounds;
End;

Function TSkillTab.GetSkillLevel(SKILL: GL_SKILL_LEVEL): Integer;
var
  I: Integer;
  B: TBox;
  Text: glTextArray;
Begin
  Result := -1;
  B := Self.GetSkillBounds(SKILL);
  If ((B.X1 <> -1) and (B.Y1 <> -1) and (B.X2 <> -1) and (B.Y2 <> -1)) Then
  Begin
    Text := glCharsToTexts(glGetChars(B), 5, 7);
    If (Length(Text) >= 2) Then
      Result := StrToIntDef(Trim(Text[0].Text), -1);
  End;
End;

Function TSkillTab.GetMaxSkillLevel(SKILL: GL_SKILL_LEVEL): Integer;
var
  I: Integer;
  B: TBox;
  Text: glTextArray;
Begin
  Result := -1;
  B := Self.GetSkillBounds(SKILL);
  If ((B.X1 <> -1) and (B.Y1 <> -1) and (B.X2 <> -1) and (B.Y2 <> -1)) Then
  Begin
    Text := glCharsToTexts(glGetChars(B), 5, 7);
    If (Length(Text) >= 2) Then
      Result := StrToIntDef(Trim(Text[1].Text), -1);
  End;
End;

Function TSkillTab.GetSkillInfo(SKILL: GL_SKILL_LEVEL): TStringArray;
var
  B: TBox;
  I: Integer;
  glChars: glCharArray;
Begin
  B := Self.GetSkillBounds(SKILL);
  If ((B.X1 <> -1) and (B.Y1 <> -1) and (B.X2 <> -1) and (B.Y2 <> -1)) Then
  Begin
    MouseBox(B, MOUSE_MOVE);
    glChars := glGetChars(GL_UptextBounds);
    If (Length(glChars) > 0) then
      Result := glCharsToText(glChars, 3, 5);

    If (Length(Result) > 7) Then
    Begin
      Result[0] := Trim(Result[4]);
      Result[1] := Trim(Result[5]);
      Result[2] := Trim(Result[6]);
      Result[3] := Trim(Result[7]);

      If (PosEx('skill', Result[0], 1) > 0) Then
      Begin
        Result[4] := Trim(Result[8]);
        SetLength(Result, 5);
      End Else
        SetLength(Result, 4);
      Exit;
    End;
  End;
End;

Function TSkillTab.GetCurrentXP(SKILL: GL_SKILL_LEVEL): Integer;
var
  Info: TStringArray;
Begin
  Result := -1;
  Info := Self.GetSkillInfo(SKILL);
  If (Length(Info) >= 2) Then
  Begin
    If (PosEx('skill', Info[0], 1) > 0) Then
      Result := StrToIntDef(ExtractFromStr(Info[2], NUMBERS), -1)
    Else
      Result := StrToIntDef(ExtractFromStr(Info[1], NUMBERS), -1);
  End;
End;

Function TSkillTab.GetNextLevelXP(SKILL: GL_SKILL_LEVEL): Integer;
var
  Info: TStringArray;
Begin
  Result := -1;
  Info := Self.GetSkillInfo(SKILL);
  If (Length(Info) >= 3) Then
  Begin
    If (PosEx('skill', Info[0], 1) > 0) Then
      Result := StrToIntDef(ExtractFromStr(Info[3], NUMBERS), -1)
    Else
      Result := StrToIntDef(ExtractFromStr(Info[2], NUMBERS), -1);
  End;
End;

Function TSkillTab.GetRemainingXP(SKILL: GL_SKILL_LEVEL): Integer;
var
  Info: TStringArray;
Begin
  Result := -1;
  Info := Self.GetSkillInfo(SKILL);
  If (Length(Info) >= 4) Then
  Begin
    If (PosEx('skill', Info[0], 1) > 0) Then
      Result := StrToIntDef(ExtractFromStr(Info[4], NUMBERS), -1)
    Else
      Result := StrToIntDef(ExtractFromStr(Info[3], NUMBERS), -1);
  End;
End;
