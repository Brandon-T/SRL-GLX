{$IFNDEF SRLCompatibility}
const
  VK_ENTER = 13;
{$ENDIF}

type Timer = record
  Time: Int64;
end;

Procedure Timer.Start;
Begin
  Time := GetSystemTime;
End;

Procedure Timer.Reset;
Begin
  Time := 0;
End;

Function Timer.TimeElapsed: Integer;
Begin
  Result := GetSystemTime - Time;
End;

Function Timer.TimeElapsedSeconds: Integer;
Begin
  Result := round(self.TimeElapsed / 1000);
End;

Function Timer.TimeElapsedMinutes: Integer;
Begin
  Result := round(self.TimeElapsedSeconds / 60);
End;

{$IFNDEF SRLCompatibility}
Procedure TypeByte(B: Byte);
Begin
  {$IFDEF SMART}
  If (B = 13) then
    B:= 10;
  {$ENDIF}
  KeyDown(B);
  Wait(10 + Random(50));
  KeyUp(B);
End;
{$ENDIF}

{$IFNDEF SRLCompatibility}
Procedure TypeSend(Text: String; Send: Boolean = True);
var
  I: Integer;
Begin
  For I := 1 to Length(Text) do
  Begin
    {$IFDEF SIMBAMAJOR980}
    SendKeys(Text[i], 40 + Random(40));
    {$ELSE}
    SendKeys(Text[i], 30 + Random(30), 30 + Random(30));
    {$ENDIF}
    Wait(20 + Random(40));
  End;

  If (Send) Then
    TypeByte(VK_ENTER);
End;
{$ENDIF}

Procedure Pointer.Inc(Size: Int64);
Begin
  Self := Self + Size;
End;

Procedure Delete(Ptr: Pointer; var Pointers: Array of Pointer); overload;
var
  I, J: Integer = 0;
  Ptrs: Array of Pointer;
begin
  SetLength(Ptrs, Length(Pointers));
  For I := 0 To High(Pointers) do
    if (Pointers[I] <> Ptr) then
    begin
      Ptrs[J] := Pointers[I];
      Inc(J);
    end;
  SetLength(Ptrs, J);
  Pointers := Ptrs;
end;

Function TBox.Width: Integer;
Begin
  Result := Abs(Self.X2 - Self.X1);
End;

Function TBox.Height: Integer;
Begin
  Result := Abs(Self.Y2 - Self.Y1);
End;

Function TBox.MidPoint: TPoint;
Begin
  Result := MiddleBox(Self);
End;

Function TBox.Contains(Pt: TPoint): Boolean;
Begin
  Result := (Pt.X >= Self.X1) and (Pt.X <= Self.X2) and (Pt.Y >= Self.Y1) and (Pt.Y <= Self.Y2);
End;

Function TIntegerArray.IndexOf(Value: Integer): Integer;
var
  I: Integer;
Begin
  For I := 0 To High(Self) Do
    if (Self[I] = Value) then
    begin
      Result := I;
      Exit;
    end;
  Result := -1;
End;

Function TIntegerArray.Contains(Value: Integer): Boolean;
Begin
  Result := Self.IndexOf(Value) <> -1;
End;

Function TCardinalArray.IndexOf(Value: Cardinal): Integer;
var
  I: Integer;
Begin
  For I := 0 To High(Self) Do
    if (Self[I] = Value) then
    begin
      Result := I;
      Exit;
    end;
  Result := -1;
End;

Function TCardinalArray.Contains(Value: Cardinal): Boolean;
Begin
  Result := Self.IndexOf(Value) <> -1;
End;

Function TStringArray.IndexOf(Value: String; CaseSensitive: Boolean = True): Boolean;
var
  I: Integer;
Begin
  If (CaseSensitive) then
    Value := LowerCase(Value);

  For I := 0 To High(Self) Do
    if (CaseSensitive) then
    begin
      if (LowerCase(Self[I]) = Value) then
      begin
        Result := I;
        Exit;
      end;
    end else
      if (Self[I] = Value) then
      begin
        Result := I;
        Exit;
      end;
  Result := -1;
End;

Function TStringArray.Contains(Value: String; CaseSensitive: Boolean = True): Boolean;
Begin
  Result := Self.IndexOf(Value, CaseSensitive) <> -1;
End;

Function TBoxArray.Bounds: TBox;
var
  I, J: Integer;
  TPA: TPointArray;
Begin
  SetLength(TPA, Length(Self) * 4);

  For I := 0 To High(Self) Do
  Begin
    TPA[J] := Point(Self[I].X1, Self[I].Y1);
    TPA[J + 1] := Point(Self[I].X1, Self[I].Y2);
    TPA[J + 2] := Point(Self[I].X2, Self[I].Y2);
    TPA[J + 3] := Point(Self[I].X2, Self[I].Y1);
    J := J + 4;
  End;
  Result := GetTPABounds(TPA);

  If (Length(Self) = 1) Then
  Begin
    Result.X1 := Self[0].X1;
    Result.Y1 := Self[0].Y1;
  End;
End;

Function GetDirectoryName(Directory, Path: String): String;
var
  I: Integer;
  Directories: TStringArray;
Begin
  Directories := GetDirectories(Path);
  For I := 0 To High(Directories) Do
    If ExecRegExpr(Directory, Directories[I]) Then
    Begin
      Result := Directories[I];
      Exit;
    End;
End;

Function FindDirectory(Directory, Path: String): Boolean;
Begin
  Result := Length(GetDirectoryName(Directory, Path)) > 0;
End;

{$IFNDEF SRLCompatibility}
Function GetJavaPath(Console: Boolean): String;
var
  Drive: String;
  CurrentPath: String;
Begin
  Drive := Copy(PluginPath, 0, 3);

  If (FindDirectory('Program\sFiles\s\(x86\)', Drive)) Then
  Begin
    CurrentPath := Drive + 'Program Files (x86)\';
  End Else
    CurrentPath := Drive + 'Program Files\';

  If (FindDirectory('Java|java', CurrentPath + '\')) Then
  Begin
    CurrentPath := CurrentPath + 'Java\';
  End Else
    Begin
      Writeln('Failed To Find Path: ' + CurrentPath + 'Java\');
      Exit;
    End;

  Drive := GetDirectoryName('jre', CurrentPath);
  If (Length(Drive) > 0) Then
  Begin
    If (Console) Then
      CurrentPath := CurrentPath + Drive + '\bin\java.exe'
    Else
      CurrentPath := CurrentPath + Drive + '\bin\javaw.exe';
  End Else
    Begin
      Drive := GetDirectoryName('jdk', CurrentPath);
      If (Console) Then
      CurrentPath := CurrentPath + Drive + 'jre\bin\java.exe'
    Else
      CurrentPath := CurrentPath + Drive + 'jre\bin\javaw.exe';
    End;

  If (FileExists(CurrentPath)) Then
    Result := CurrentPath
  Else
    writeln('Failed To Find Java.exe or Javaw.exe. Please add ...\JRE\Bin to your PATH environment variable.');
End;
{$ENDIF}
