{*
    This file contains all functions relating to Login information.
    This file is intended to retrieve the following information:

      - Determining Login state
      - Game Session Ended
      - Restarting the client
      - Logging in the player
      - Logging out the player
      - Interacting with the lobby
*}

{$include_once GLX/Mouse.Simba}
{$IFDEF SMARTOLD}
{$include_once GLX/Misc/SMART8API.Simba}
{$ELSE IF SMART}
{$include_once GLX/Misc/SMART.Simba}
{$ENDIF}

{$IFDEF SMART}
Procedure SetupGLX(var Smart: TSmart; Width, Height: Integer); Forward;
{$ENDIF}

type TPlayer = record
  Name: String;
  NickName: String;
  Pass: String;
  Pin: String;
  World: TIntegerArray;
end;

{*
  Returns whether or not the current player is in game/logged in fully.

  Developer Info:
    24990    - TextureID of the chat-bubble next to the player name in the chat box.
*}
Function GL_LoggedIn: Boolean;
Begin
  Result := (Length(glGetTextures(24990)) > 0);
End;

{*
  Returns whether or not the current player is in the lobby.

  Developer Info:
    564570    - TextureID of the lobby tab icons.
*}
Function GL_LobbyScreen: Boolean;
Begin
  Result := (Length(glGetTextures(564570)) = 6);
End;

{*
  Returns whether or not the player is in game or the lobby or on the login screen.
  Returns false otherwise.

  Developer Info:
    2021324   - TextureID of the RS Logo on the login screen.
*}
Function GL_RSReady: Boolean;
Begin
  Result := (GL_LoggedIn) Or (GL_LobbyScreen);

  If (Not Result) Then
    Result := (Length(glGetTextures(2021324)) > 0);
End;

{*
  Returns whether or not game session has ended.

  Developer Info:
    248631    - TextureID of the exclamation mark on the Game-Session interface.
    449901    - TextureID of the top left corner of the Game-Session interface.
    448606    - TextureID of the top right corner of the Game-Session interface.
    399681    - TextureID of the bottom left corner of the Game-Session interface.
    399068    - TextureID of the bottom right corner of the Game-Session interface.
*}
Function GL_GameSession: Boolean;
var
  I: Integer;
  BA: TBoxArray;
  Text: glTextArray;
  T: glTextureArray;
Begin
  Result := False;
  If ((Not GL_LoggedIn) And (Length(glGetTextures(248631)) > 0)) Then
  Begin
    T := glGetTextures([449901, 448606, 399681, 399068]);
    SetLength(BA, Length(T));
    For I := 0 To High(T) Do
      BA[I] := T[I].Bounds;

    Text := glCharsToTexts(glGetChars(BA.Bounds), 3, 5);

    For I := 0 To High(Text) Do
      If (ExecRegExpr('game\ssession', Text[I].Text)) Then
        Result := True;
  End;
End;

{*
  Returns whether it was successful at restarting the specified Smart Client.
*}
Function GL_RestartClient{$IFDEF SMART}(var Smart: TSmart){$ENDIF}: Boolean;
var
  W, H: Integer;
Begin
  Result := False;
  {$IFDEF SMART}
  W := Smart.Width;
  H := Smart.Height;
  Smart.Destroy;
  SetupGLX(Smart, W, H);
  {$ENDIF}
  Result := GL_RSReady;
End;

{*
  Returns whether it successfully exited to the lobby from in game or if the player is
  already in the lobby.
*}
Function GL_ExitToLobby: Boolean;
Begin
End;

{*
  Returns whether it successfully exited from the lobby to the login screen.

  Developer Info:
    9369    - TextureID of the lobby's exit button.
*}
Function GL_LeaveLobby: Boolean;
var
  T: LongInt;
  Textures: glTextureArray;
Begin
  T := GetSystemTime;
  While ((Not Result) And ((GetSystemTime - T) < 30000)) Do
  Begin
    Textures := glGetTextures(9369);
    If (Length(Textures) > 0) Then
      MouseBox(Textures[0].Bounds);

    Wait(RandomRange(1000, 2000));
    Result := (Not (GL_LobbyScreen));
  End;
End;

{*
  Returns whether it successfully logged in the specified player from the login screen
  to the lobby.

  Developer Info:
    76466 -   TextureID of the left corner of the login box (Username OR Password Box).
    76453 -   TextureID of the right corner of the login box (Username OR Password Box).
*}
Function GL_LoginToLobby(Player: TPlayer): Boolean;
var
  I, J: Integer;
  T: Timer;
  Area: TBox;
  Text: glTextArray;
  Textures: glTextureArray;
Label
  Start;
Begin
  Result := (GL_LoggedIn or GL_LobbyScreen);
  If (Result) Then Exit;

  Start:
  T.Start();
  Repeat
    If (GL_RSReady) Then Break;
    If (T.TimeElapsed() > 180000) Then
    Begin
      WriteLn('It has been 3 minutes and Runescape is not yet ready... Terminating.');
      TerminateScript;
    End;
    Wait(RandomRange(1000, 2000));
  Until(False);

  T.Reset();
  WriteLn('Welcome to Runescape.');
  Textures := glGetTextures([76466, 76453]);
  If (Length(Textures) < 1) Then Exit;

  For I := 0 To 1 Do
  Begin
    If (I = 0) Then
      Area := glTextureBounds(Textures[0], Textures[1])
    Else
      Area := glTextureBounds(Textures[2], Textures[3]);

    Text := glCharsToTexts(glGetChars(Area), 2, 5);
    If (Length(Text) > 0) Then
    Begin
      Mouse(Text[0].Bounds.X2, (Text[0].Bounds.Y1 + Text[0].Bounds.Y2) div 2, 2, 2, MOUSE_LEFT);
      While(Length(Text) > 0) Do
      Begin
        Text := glCharsToTexts(glGetChars(Area), 2, 5);
        TypeByte(VK_BACK);
        Wait(25 + Random(20));
      End;
    End;

    Wait(Random(300));

    If (I = 0) Then
    Begin
      WriteLn(Capitalize(Player.Name));
      TypeSend(Player.Name);
    End Else
      TypeSend(Player.Pass);
    Wait(800 + Random(50));
  End;

  T.Start();
  Repeat
    If (T.TimeElapsed() > 60000) Then
      Goto Start;

    If (GL_LobbyScreen) Then
      Break;
  Until(False);
  Result := True;
End;

{*
  Returns whether it successfully logged in the specified player fully from the login screen or
  from the lobby screen to In-Game.

  Developer Info:
    95625     - TextureID of the Play Button on the lobby screen.
    2461367   - ColourID of the Play button on the lobby screen.
*}
Function GL_LoginPlayer(Player: TPlayer): Boolean;
var
  L: Integer;
  T: Timer;
  PlayButton: glTextureArray;
Begin
  If (Not GL_LoggedIn) Then
    If (GL_LoginToLobby(Player)) Then
    Begin
      PlayButton := glGetTextures(95625, 2461367, 10);
      L := Length(PlayButton);
      If (L > 0) Then
      Begin
        MouseBox(PlayButton[RandomRange(0, L - 1)].Bounds, MOUSE_LEFT);
        T.Start;
        While (T.TimeElapsed < 10000) Do
        Begin
          Wait(500);
          If (GL_LoggedIn) Then
          Begin
            Result := True;
            Exit;
          End;
        End;
        T.Reset;
      End;
    End;
End;
