{$include_once Text.Simba}

Function GL_WaitOption(Options: TStringArray; Action: Integer; Time: Integer): Boolean;
var
  T: Timer;
begin
  T.Start;
  Result := False;
  While (T.TimeElapsed < Time) Do
  Begin
    If (GL_ChooseOption(Options, Action)) Then
    Begin
      Result := True;
      Exit;
    End;
    Wait(20 + Random(10));
  End;
End;

Function GL_WaitOption(Options: TStringArray; Time: Integer): Boolean; overload;
Begin
  Result := GL_WaitOption(Options, MOUSE_LEFT, Time);
End;

Function GL_WaitOption(Option: String; Action: Integer; Time: Integer): Boolean; overload;
Begin
  Result := GL_WaitOption([Option], Action, Time);
End;

Function GL_WaitOption(Option: String; Time: Integer): Boolean; overload;
Begin
  Result := GL_WaitOption([Option], MOUSE_LEFT, Time);
End;

Function GL_WaitMouseUptext(Options: TStringArray; Time: Integer): Boolean;
var
  T: Timer;
Begin
  T.Start;
  Result := False;
  While (T.TimeElapsed < Time) Do
  Begin
    If (GL_IsMouseUpText(Options)) Then
    Begin
      Result := True;
      Exit;
    End;
    Wait(20 + Random(20));
  End;
End;

Function GL_WaitMouseUptext(Option: String; Time: Integer): Boolean; overload;
Begin
  Result := GL_WaitMouseUptext([Option], Time);
End;

Function GL_WaitFindNPCChatText(Texts: TStringArray; Action: Integer; Time: Integer): Boolean;
var
  T: Timer;
begin
  T.Start;
  Result := False;
  While (T.TimeElapsed < Time) Do
  Begin
    If (GL_FindNPCChatText(Texts, Action)) Then
    Begin
      Result := True;
      Exit;
    End;
    Wait(20 + Random(10));
  End;
End;

Function GL_WaitFindNPCChatText(Text: String; Action: Integer; Time: Integer): Boolean; overload;
begin
  Result := GL_WaitFindNPCChatText([Text], Action, Time);
end;

function GL_WaitFunc(Func: function: boolean; WaitPerLoop, MaxTime: Integer): Boolean;
var
  T: Integer;
begin
  T := GetSystemTime + MaxTime;
  while (GetSystemTime < T) do
  begin
    if Func then
    begin
      Result := True;
      Exit;
    end;
    Wait(WaitPerLoop);
  end;
end;

function GL_WaitFindModel(ID: Cardinal; WaitPerLoop, MaxTime: Integer): Boolean;
var
  T: Integer;
begin
  T := GetSystemTime + MaxTime;
  while (GetSystemTime < T) do
  begin
    if (Length(glGetModels(ID)) < 1) then
    begin
      Result := True;
      Exit;
    end;
    Wait(WaitPerLoop);
  end;
end;

function GL_WaitFindTexture(ID: Integer; WaitPerLoop, MaxTime: Integer): Boolean;
var
  T: Integer;
begin
  T := GetSystemTime + MaxTime;
  while (GetSystemTime < T) do
  begin
    if (Length(glGetTextures(ID)) < 1) then
    begin
      Result := True;
      Exit;
    end;
    Wait(WaitPerLoop);
  end;
end;

function GL_WaitFindTexture(ID: Integer; Colour: Integer; Tolerance: Integer; WaitPerLoop, MaxTime: Integer): Boolean; overload;
var
  T: Integer;
begin
  T := GetSystemTime + MaxTime;
  while (GetSystemTime < T) do
  begin
    if (Length(glGetTextures(ID, Colour, Tolerance)) < 1) then
    begin
      Result := True;
      Exit;
    end;
    Wait(WaitPerLoop);
  end;
end;

function GL_WaitFindTexture(ID: Integer; Colour: Integer; Tolerance: Integer; Area: TBox; WaitPerLoop, MaxTime: Integer): Boolean; overload;
var
  T: Integer;
begin
  T := GetSystemTime + MaxTime;
  while (GetSystemTime < T) do
  begin
    if (Length(glGetTextures(ID, Colour, Tolerance, Area)) < 1) then
    begin
      Result := True;
      Exit;
    end;
    Wait(WaitPerLoop);
  end;
end;

{$IFNDEF SRLCompatibility}
Function msToTime(MS: Integer): String; // Simplified
Var
  Time: array [0..2] of Integer;
Begin
  ConvertTime(MS, Time[0], Time[1], Time[2]);
  Result := IntToStr(Time[0]) + ' hr ' + IntToStr(Time[1]) + ' min ' + IntToStr(Time[2]) + ' sec ';
End;
{$ENDIF}

(*
  Description:
    Given timeFrame (in Milliseconds) and quantity (eg. an Integer variable),
      returns the rate per hour.

  Example:
    program foobar;
    var
      t: Integer;
      q: Integer;
      result: Int64;
    begin
      t := GetTimeRunning();
      q := getQuantity(); // Sudo function to get current "q" int variable
      result := perHR(t, q);
      WriteLn(result);
    end.
*)
Function perHR(const timeFrame, quantity: Integer): Int64;
var
  c: Currency;
Begin
  c := 3600000 / Abs(timeFrame);
  Result := Floor(c * quantity);
End;
