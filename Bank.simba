{*
    This file contains all functions relating to the Bank of RS.
    Withdrawing Items, Entering Pins, Depositing Items, etc..
*}



{$include_once GLXCore.Simba}
{$include_once Cache.Simba}
{$include_once Internals.Simba}
{$include_once Mouse.Simba}
{$include_once Text.Simba}
{$include_once Minimap.Simba}

Function GL_InvBounds: TBox; Forward;


{*
  Returns whether or not the PinScreen is Open.

  Developer Info:
    848640 = Pin Button TextureID.
    1186662 = Pin Texture ColourID.
*}
Function GL_PinScreen: Boolean;
Begin
  Result := Length(glGetTextures(848640, 1186662, 5)) > 0;
End;

{*
  Returns whether or not the Bank Screen is Open.

  Developer Info:
    714000 = TextureID containing the 'Bank of Runescape' Text.
*}
Function GL_BankScreen: Boolean;
var
  B: TBox;
  I: Integer;
  T: glTextureArray;
  Text: glTextArray;
Begin
  T := glGetTextures(714000);
  If (Length(T) < 1) or GL_PinScreen Then Exit;
  B := IntToBox(T[0].Bounds.X1, T[0].Bounds.Y1, T[High(T)].Bounds.X2, T[High(T)].Bounds.Y2);
  Text := glCharsToTexts(glGetChars(B), 4, 5);
  For I := 0 To High(Text) Do
    If ExecRegExpr('Bank\sof\sRunescape', Text[I].Text) Then
      Result := True;
End;

{*
  Closes the BankScreen and returns whether or not it was successful
  in doing so.

  Developer Info:
    714000  = TextureID containing the 'Bank of Runescape' Text.
    16320   = Close Button TextureID.
    2171469 = ColourID when not hovered over.
    2898308 = ColourID when mouse hovered over.
*}
Function GL_CloseBank: Boolean;
var
  I, J: Integer;
  T, C: glTextureArray;
Begin
  Result := True;
  T := glGetTextures(714000);
  C := glGetTextures([16320, 16320], [2171469, 2898308], [4, 4]);
  If (Length(T) < 1) or (Length(C) < 1) Then Exit;

  For I := 0 To High(T) Do
    For J := 0 To High(C) Do
      If (PointInBox(MiddleBox(C[J].Bounds), T[I].Bounds)) Then
      Begin
        MouseBox(C[J].Bounds, MOUSE_LEFT);
        Wait(RandomRange(50, 75));
        Result := Not GL_BankScreen;
        Exit;
      End;
  Result := False;
End;

{*
  Closes the PinScreen and returns whether or not it was successful
  in doing so.

  Developer Info:
    13769 = TextureID of the top left of the Exit Button.
    13134 = TextureID of the lower right of the Exit Button.
*}
Function GL_ClosePinScreen: Boolean;
Var
  B: TBox;
  Text: glTextArray;
  Timer, I, J: Integer;
  UL, LR: glTextureArray;
Begin
  Result := False;
  Timer := GetSystemTime + 10000;
  UL := glGetTextures(13769);
  LR := glGetTextures(13134);
  If (Length(UL) < 1) or (Length(LR) < 1) then
    Exit;

  For I := 0 To High(UL) Do
  Begin
    B.X1 := UL[I].Bounds.X1;
    B.Y1 := UL[I].Bounds.Y1;
    B.X2 := LR[I + 1].Bounds.X2;
    B.Y2 := LR[I + 1].Bounds.Y2;
    Text := glCharsToTexts(glGetChars(B), 4, 5);
    For J := 0 To High(Text) Do
    Begin
      If (Pos('Exit', Text[J].Text) > 0) then
      Begin
        I := -1;
        Break;
      End;
    End;
    If (I = -1) Then Break;
    Inc(I);
  End;

  While GL_PinScreen Do
  Begin
    If (Timer < GetSystemTime) Then
      Break;
    MouseBox(B, MOUSE_LEFT);
    Wait(RandomRange(50, 75));
  End;
  Result := Not GL_PinScreen;
End;

{*
  Returns a Bounding-Box representing the area of the bank where items are located.

  Developer Info:
    714000  = TextureID containing the 'Bank of Runescape' Text.
    88773   = TextureID of the lower right of the BankScreen.
    3786240 = TextureID of the Background of the Bank. Same ID as that of the Inv, Chat, MM.
*}
Function GL_BankBounds: TBox;
var
  I: Integer;
  BA: TBoxArray;
  T: glTextureArray;
Begin
  If (UseSysCache) Then
  Begin
    I := SysCache.Contains(TCacheType.CACHE_BANK);
    if (I <> -1) Then
    Begin
      Result := SysCache[I].Area;
      Exit;
    End;
  End;

  T := glGetTextures([714000, 88773]);
  SetLength(BA, Length(T));
  For I := 0 To High(T) Do
    BA[I] := T[I].Bounds;

  Result := BA.Bounds;
  T := glGetTextures(3786240, Result);
  If (Length(T) > 0) Then
    Result := T[0].Bounds;

  If (UseSysCache) Then
    SysCache.CacheBank(Result);
End;

{*
  Returns a Bounding-Box around the area of the bank's inventory where items are.

  Developer Info:
    3786240 = TextureID of the Background of the Bank. Same ID as that of the Inv, Chat, MM.
*}
Function GL_BankInvBounds: TBox;
Label Skip;
var
  I, J: Integer;
  BA: TBoxArray;
  Background: glTextureArray;
Begin
  If (UseSysCache) Then
  Begin
    I := SysCache.Contains(TCacheType.CACHE_BANK_INV);
    if (I <> -1) Then
    Begin
      Result := SysCache[I].Area;
      Exit;
    End;
  End;

  Result := IntToBox(-1, -1, -1, -1);
  If (Not GL_BankScreen) Then Exit;
  SetLength(BA, 4);
  BA[0] := GL_MMBounds;
  BA[1] := GL_InvBounds;
  BA[2] := GL_ChatBounds;
  BA[3] := GL_BankBounds;

  Background := glGetTextures(3786240);

  For I := 0 To High(Background) Do
  Begin
    For J := 0 To High(BA) Do
    Begin
      If (PointInBox(MiddleBox(BA[J]), Background[I].Bounds)) Then
        Goto Skip;
    End;

    Result := Background[I].Bounds;
    If (UseSysCache) Then
        SysCache.CacheBankInv(Result);
    Exit;
    Skip:
  End;
End;

{*
  Returns a count of all items in the inventory when the bank is open.

  Developer Info:
    57120 = TextureID of the top of the BankInventory.
    20400 = TextureID of the top-right corner of the BankInventory. Same ID as the right side of the BankInventory.
    46967 = TextureID of the bottom-right corner of the BankInventory.
    3786240 = TextureID of the Background of the Bank. Same ID as that of the Inv, Chat, MM.
*}
Function GL_CountBankInv(G: TGraphics): Integer;
  Function glGetTexturesEx(Area: TBox; IDs: TIntegerArray): glTextureArray;
  var
    Ptr: Pointer;
    Size, I, J: Cardinal;
    XOffset, YOffset: Integer;
    type ptr_glTexture = ^glTexture;
  Begin
    J := 0;
    Result := [];
    Ptr := GLXTextures(Size);
    SetLength(Result, Size);
    XOffset := (PtrUInt(@(ptr_glTexture(nil + 1)^.X)) - 1);
    YOffset := (PtrUInt(@(ptr_glTexture(nil + 1)^.Y)) - 1);

    For I := 0 To Size - 1 Do
    Begin
      If (PointInBox(Point(Integer((Ptr + XOffset)^), Integer((Ptr + YOffset)^)), Area) And (Not IDs.Contains(Integer(Ptr^)))) Then
      Begin
        Result[J] := glTexture(Ptr^);
        Inc(J);
      End;
      Ptr.Inc(sizeof(glTexture));
    End;
    SetLength(Result, J);
  End;
var
  I: Integer;
  Found: Boolean;
  T: glTextureArray;
Begin
  T := glGetTexturesEx(GL_BankInvBounds, [57120, 20400, 46967]);
  For I := 0 To High(T) Do
  Begin
    If (T[I].ID = 3786240) Then
      Found := True;

    If (Found) Then
    Begin
      Result := High(T) - I;
      Exit;
    End;
  End;
End;

{*
  Withdraws an Item from the bank given the:
    ID      =  TextureID of the item to withdraw.
    Uptexts =  The mouse over text when hovering over the item.
    Amount  =  Amount of the item to withdraw. Where 0 = All, -1 = All But One, X = Arbitrary Amount.

  Developer Info:
    17204850 = TextureID of the cream/brown area in the chatbox
                where you enter the amount you wish to withdraw.
*}
Function GL_Withdraw(ID: Integer; Uptexts: TStringArray; Amount: Integer = 0): Boolean;
var
  I: Integer;
  T, Chat: glTextureArray;
  Clock: Integer;
Begin
  T := glGetTextures(ID, GL_BankBounds);

  For I := 0 To High(T) Do
  Begin
    MouseBox(T[I].Bounds, MOUSE_MOVE);
    Wait(RandomRange(300, 700));
    If (GL_IsMouseUpText(Uptexts)) Then
    Begin
      ClickMouse(MOUSE_RIGHT);
      Case Amount Of
        -1: Result := GL_ChooseOption('-All but');
        -0: Result := GL_ChooseOption('-All');
      Else
        Begin
          Result := GL_ChooseOption(['-' + ToStr(Amount) + ' '], MOUSE_NIL);
          If (Not Result) Then
          Begin
            If GL_ChooseOption('-X') Then
            Begin
              Clock := GetSystemTime;
              While(GetSystemTime - Clock < 2500) Do
              Begin
                Chat := glGetTextures(17204850);
                If (Length(Chat) > 0) Then
                Begin
                  Wait(RandomRange(300, 500));
                  TypeSend(ToStr(Amount));
                  Result := True;
                  Break;
                End;
                Wait(RandomRange(50, 100));
              End;
            End;
          End Else
            Result := GL_ChooseOption(['-' + ToStr(Amount) + ' '], MOUSE_LEFT);
        End;
      End;
    End;
  End;
End;

{*
  Withdraws an Item from the bank given:
    ID      =  TextureID of the item to withdraw.
    Colour  =  ColourID of the item to withdraw.
    Uptexts =  Mouse Over text of the item to withdraw.
    Amount  =  Amount of the item to withdraw. Where 0 = All, -1 = All But One, X = Arbitrary Amount.

  Developer Info:
    17204850 = TextureID of the cream/brown area in the chatbox
                where you enter the amount you wish to withdraw.
*}
Function GL_Withdraw(ID, Colour, Tolerance: Integer; Uptexts: TStringArray; Amount: Integer = 0): Boolean; overload;
var
  I: Integer;
  T, Chat: glTextureArray;
  Clock: Integer;
Begin
  T := glGetTextures(ID, Colour, Tolerance, GL_BankBounds);

  For I := 0 To High(T) Do
  Begin
    MouseBox(T[I].Bounds, MOUSE_MOVE);
    Wait(RandomRange(300, 700));
    If (GL_IsMouseUpText(Uptexts)) Then
    Begin
      ClickMouse(MOUSE_RIGHT);
      Case Amount Of
        -1: Result := GL_ChooseOption('-All but');
        -0: Result := GL_ChooseOption('-All');
      Else
        Begin
          Result := GL_ChooseOption(['-' + ToStr(Amount) + ' '], MOUSE_NIL);
          If (Not Result) Then
          Begin
            If GL_ChooseOption('-X') Then
            Begin
              Clock := GetSystemTime;
              While(GetSystemTime - Clock < 2500) Do
              Begin
                Chat := glGetTextures(17204850);
                If (Length(Chat) > 0) Then
                Begin
                  Wait(RandomRange(300, 500));
                  TypeSend(ToStr(Amount));
                  Result := True;
                  Break;
                End;
                Wait(RandomRange(50, 100));
              End;
            End;
          End Else
            Result := GL_ChooseOption(['-' + ToStr(Amount) + ' '], MOUSE_LEFT);
        End;
      End;
    End;
  End;
End;
