{$IFNDEF SRLCompatibility}
const
  MOUSE_NONE   = -1;
  MOUSE_MOVE  = 3;

  MOUSE_BREAK    = 8;
  MOUSE_ACCURATE = 14;
  MOUSE_HUMAN    = 7;
{$ENDIF}

var mouseSpeed: Integer = 14;

procedure _brakeWindMouse(xs, ys, xe, ye, gravity, wind, minWait, maxWait,
          targetArea: extended; double: boolean);
var
  veloX,veloY,windX,windY,veloMag,dist,randomDist,lastDist,D: extended;
  lastX,lastY,MSP,W,TDist: integer;
  T : LongWord;
  sqrt2,sqrt3,sqrt5,PDist,maxStep,dModA,dModB,nModA,nModB: extended;
begin
  MSP  := mouseSpeed;
  sqrt2:= sqrt(2);
  sqrt3:= sqrt(3);
  sqrt5:= sqrt(5);

  TDist := distance(round(xs), round(ys), round(xe), round(ye));
  if (TDist < 1) then
    TDist := 1;

  dModA := 0.88; //.80
  dModB := 0.95; //.90

  if (TDist > 220) then
  begin
    nModA := 0.08;
    nModB := 0.04;
  end else if (TDist <= 220) then
  begin
    nModA := 0.20;
    nModB := 0.10;
  end;

  t := getSystemTime() + 5000;
  repeat
    if (getSystemTime() > t) then
      break;

    dist:= hypot(xs - xe, ys - ye);
    wind:= minE(wind, dist);
    if (dist < 1) then
      dist := 1;
    PDist := (dist/TDist);
    if (PDist < 0.01) then
      PDist := 0.01;

    if double then
    begin
      if (PDist <= dModA) then
      begin
        D := (round((round(dist)*0.3))/5);
        if (D < 20) then
          D := 20;

      end else if (PDist > dModA) then
      begin
        if (PDist < dModB) then
          D := randomRange(5, 8)
        else if (PDist >= dModB) then
          D := randomRange(3, 4);
      end;
    end;

    if (PDist >= nModA) then
    begin
       D := (round((round(dist)*0.3))/5);
      if (D < 20) then
        D := 20;
    end else if (PDist < nModA) then
    begin
      if (PDist >= nModB) then
        D := randomRange(5, 8)
      else if (PDist < nModB) then
        D := randomRange(3, 4);
    end;

    if (D <= round(dist)) then
      maxStep := D
    else
      maxStep := round(dist);

    if dist >= targetArea then
    begin
      windX:= windX / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
      windY:= windY / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
    end else
    begin
      windX:= windX / sqrt2;
      windY:= windY / sqrt2;
    end;

    veloX:= veloX + windX;
    veloY:= veloY + windY;
    veloX:= veloX + gravity * (xe - xs) / dist;
    veloY:= veloY + gravity * (ye - ys) / dist;

    if (hypot(veloX, veloY) > maxStep) then
    begin
      randomDist:= maxStep / 2.0 + random(round(maxStep) div 2);
      veloMag:= sqrt(veloX * veloX + veloY * veloY);
      veloX:= (veloX / veloMag) * randomDist;
      veloY:= (veloY / veloMag) * randomDist;
    end;

    lastX:= round(xs);
    lastY:= round(ys);
    xs:= xs + veloX;
    ys:= ys + veloY;

    if (lastX <> round(xs)) or (lastY <> round(ys)) then
      moveMouse(round(xs), round(ys));

    W := (random((round(100/MSP)))*6);
    if (W < 5) then
      W := 5;
    if double then
      if (PDist > dModA) then
        W := round(W*2.5)
    else
      W := round(W*1.2);
    wait(W);
    lastdist:= dist;
  until(hypot(xs - xe, ys - ye) < 1)

  if (round(xe) <> round(xs)) or (round(ye) <> round(ys)) then
    moveMouse(round(xe), round(ye));

  mouseSpeed := MSP;
end;

procedure _humanWindMouse(xs, ys, xe, ye, gravity, wind, minWait, maxWait, targetArea: extended);
var
  veloX,veloY,windX,windY,veloMag,dist,randomDist,lastDist,D: extended;
  lastX,lastY,MSP,W,TDist: integer;
  T : LongWord;
  sqrt2,sqrt3,sqrt5,maxStep,rCnc: extended;
begin
  MSP  := mouseSpeed;
  sqrt2:= sqrt(2);
  sqrt3:= sqrt(3);
  sqrt5:= sqrt(5);

  TDist := distance(round(xs), round(ys), round(xe), round(ye));
  t := getSystemTime() + 10000;
  repeat
    if (getSystemTime() > t) then
      break;

    dist:= hypot(xs - xe, ys - ye);
    wind:= minE(wind, dist);
    if (dist < 1) then
      dist := 1;

    D := (round((round(TDist)*0.3))/7);
    if (D > 25) then
      D := 25;
    if (D < 5) then
      D := 5;

    rCnc := random(6);
    if (rCnc = 1) then
      D := randomRange(2,3);

    if (D <= round(dist)) then
      maxStep := D
    else
      maxStep := round(dist);

    if dist >= targetArea then
    begin
      windX:= windX / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
      windY:= windY / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
    end else
    begin
      windX:= windX / sqrt2;
      windY:= windY / sqrt2;
    end;

    veloX:= veloX + windX;
    veloY:= veloY + windY;
    veloX:= veloX + gravity * (xe - xs) / dist;
    veloY:= veloY + gravity * (ye - ys) / dist;

    if (hypot(veloX, veloY) > maxStep) then
    begin
      randomDist:= maxStep / 2.0 + random(round(maxStep) div 2);
      veloMag:= sqrt(veloX * veloX + veloY * veloY);
      veloX:= (veloX / veloMag) * randomDist;
      veloY:= (veloY / veloMag) * randomDist;
    end;

    lastX:= round(xs);
    lastY:= round(ys);
    xs:= xs + veloX;
    ys:= ys + veloY;

    if (lastX <> round(xs)) or (lastY <> round(ys)) then
      moveMouse(round(xs), round(ys));

    W := (random((round(100/MSP)))*6);
    if (W < 5) then
      W := 5;
    W := round(W*0.9);
    wait(W);
    lastdist:= dist;
  until(hypot(xs - xe, ys - ye) < 1)

  if (round(xe) <> round(xs)) or (round(ye) <> round(ys)) then
    moveMouse(round(xe), round(ye));

  mouseSpeed := MSP;
end;

Procedure ClickMouse(ClickType: Integer = Mouse_Left); overload;
var
  MX, MY: Integer;
Begin
  If (ClickType = Mouse_Move) then Exit;
  GetMousePos(MX, MY);
  HoldMouse(MX, MY, ClickType);
  For 0 To 4 Do
    Wait(20 + Random(30));
  GetMousePos(MX, MY);
  ReleaseMouse(MX, MY, ClickType);
  Wait(50 + Random(50));
End;

procedure fastClick(button: integer);
var
  x, y: integer;
begin
  if (button = MOUSE_MOVE) then
    Exit;

  getMousePos(x, y);
  holdMouse(x, y, button);

  wait(randomRange(60, 150));

  getMousePos(x, y);
  releaseMouse(x, y, button);
end;

procedure mouse(pnt: TPoint; button: integer; mmType: integer = MOUSE_HUMAN); overload;
var
  randSpeed: extended;
  x,y: integer;
begin
  if (button = MOUSE_NONE) then
    exit;

  randSpeed := (random(mouseSpeed) / 2.0 + mouseSpeed) / 10.0;
  getMousePos(x,y);

  if mmType = MOUSE_HUMAN then
    _humanWindMouse(x, y, pnt.x, pnt.y, MOUSE_HUMAN, 5, 10.0/randSpeed, 15.0/randSpeed, 10.0*randSpeed)
  else
    _brakeWindMouse(x, y, pnt.x, pnt.y, mmType, 3, 10.0/randSpeed, 15.0/randSpeed, 10.0*randSpeed, false);

  fastClick(button);
end;

procedure mouse(pnt: TPoint); overload;
begin
  mouse(pnt, MOUSE_MOVE);
end;

procedure mouse(x, y, randX, randY, button: integer = MOUSE_MOVE); overload;
begin
  mouse(point(x+random(randX), y+random(randY)), button);
end;

procedure missMouse(pnt: TPoint; correct: boolean = true);
var
  randSpeed: extended;
  x,y,x2,y2,a,dist,mp: integer;
begin
  a := mouseSpeed;
  getMousePos(x, y);
  dist := distance(x, y, pnt.x, pnt.y);
  mp := round(dist/150);
  if mp < 0 then
    mp := 1;

  randSpeed := (random(mouseSpeed) / 2.0 + mouseSpeed) / 10.0;
  x2 := randomRange(Pnt.x-(a*mp), Pnt.x+(a*mp));
  y2 := randomRange(Pnt.y-(a*mp), Pnt.y+(a*mp));
  _humanWindMouse(x, y, x2, y2, MOUSE_HUMAN, 5, 10.0/randSpeed, 15.0/randSpeed, 10.0*randSpeed);
  getMousePos(x, y);

  if (correct) then
    mouse(pnt);

  mouseSpeed := a;
end;

procedure dragMouse(dest: TPoint);
var
  x, y: integer;
begin
  getMousePos(x, y);
  holdMouse(x, y, MOUSE_LEFT);
  wait(random(100));
  mouse(dest);
  getMousePos(x, y);
  wait(random(100));
  releaseMouse(x, y, MOUSE_LEFT);
end;

procedure mouseScroll(pnt: TPoint; scrolls: integer; down: boolean = true);
var
  x, y, c: integer;
begin
  mouse(pnt, MOUSE_MOVE);
  getMousePos(x, y);

  repeat
    if (down) then
      scrollMouse(x, y, 1)
    else
      scrollMouse(x, y, -1);

    wait(16 + random(200));
    inc(c);
  until(c >= scrolls);
end;

procedure mouseBox(b: TBox; button: integer = MOUSE_MOVE; mmType: integer = MOUSE_HUMAN);
var
  p: TPoint;
  x, y: integer;
begin
  getMousePos(x, y);

  if (not pointInBox(point(x, y), b)) then // if the mouse is already in the box
  begin
    gaussBox(p, b);
    mouse(p, button, mmType);
  end else
    mouse(point(x, y), button, mmType);
end;

procedure mouseOval(cx, cy, rx, ry, mouseAction: Integer = MOUSE_MOVE);
var
  a: single;
  p: TPoint;
begin
  a := randomE() * PI * 2;
  p.x := cx + round(cos(a) * randomRange(-rx, rx));
  p.y := cy + round(sin(a) * randomRange(-ry, ry));
  mouse(p, mouseAction);
end;

procedure mouseCircle(MidX, MidY, Radius, mouseAction: Integer = MOUSE_MOVE);
begin
  mouseOval(MidX, MidY, Radius, Radius, mouseAction);
end;

Function DidYellowClick: Boolean;
Begin
  Result := (Length(glGetTextures([7878, 8022, 2528], [3292420, 3292420, 592641], [10, 10, 10])) > 0);
End;

Function DidRedClick: Boolean;
Begin
  Result := (Length(glGetTextures([8814, 8936, 3970, 4250, 3825], [3158064, 3026478, 1250068, 1250068, 1118482], [10, 10, 10, 10, 10])) > 0);
End;
