{$include_once GLX/GLXCore.Simba}

const
  VK_ENTER = 13;

Procedure TypeByte(B: Byte);
Begin
  {$IFDEF SMART}
  If (B = 13) then
    B:= 10;
  {$ENDIF}
  KeyDown(B);
  Wait(10 + Random(50));
  KeyUp(B);
End;

Procedure TypeSend(Text: String; Send: Boolean = True);
var
  I: Integer;
Begin
  For I := 1 to Length(Text) do
  Begin
    {$IFDEF SIMBAMAJOR980}
    SendKeys(Text[i], 40 + Random(40));
    {$ELSE}
    SendKeys(Text[i], 30 + Random(30), 30 + Random(30));
    {$ENDIF}
    Wait(20 + Random(40));
  End;

  If (Send) Then
    TypeByte(VK_ENTER);
End;

Function GL_MouseHoverBounds: TBox;
var
  UL, BR: glTextureArray;
Begin
  UL := glGetTextures(8814);
  BR := glGetTextures(8936);
  If (Length(UL) > 0 and Length(BR) > 0) then
    Result := glTextureBounds(UL[0], BR[1]);
End;

Function GL_GetMouseUpText: TStringArray;
var
  glChars: glCharArray;
Begin
  glChars := glGetChars(GL_MouseHoverBounds);
  If (Length(glChars) > 0) then
    Result := glCharsToText(glChars, 5, 5);
End;

Function GL_IsMouseUpText(Text: String): Boolean;
Begin
  Result := Pos(Text, Implode('', GL_GetMouseUpText)) > 0;
End;

Function GL_IsMouseUpText(Text: TStringArray): Boolean; overload;
var
  I, H: Integer;
  Uptext: String;
Begin
  Uptext := Implode('', GL_GetMouseUpText);
  H := High(Text);
  For I := 0 To H Do
    If (Pos(Text[I], UpText) > 0) Then
    Begin
      Result := True;
      Exit;
    End;
End;

Function GL_GetChatBoxBounds: TBox;
var
  I, J: Integer;
  S, T: glTextureArray;
Begin
  If (Not GL_LoggedIn) Then Exit;

  T := glGetTextures(3786240); //Chatbox texture.
  S := glGetTextures(24990);   //ChatBubble.
  If (Length(T) > 0 and Length(S) > 0) then
    For I := 0 To High(T) Do
      For J := 0 To High(S) Do
        If (PointInBox(Point(S[J].X, S[J].Y), T[I].Bounds)) then
        begin
          Result := T[I].Bounds;
          Exit;
        end;
End;

Function GL_FindNPCChatText(Texts: TStringArray; Action: Integer): Boolean;
var
  B: TBox;
  TP: TPoint;
  I, J: Integer;
  Text: glTextArray;
  Options: glTextureArray;
Begin
  B := GL_GetChatBoxBounds;
  Options := glGetTextures(52107, B);
  Insert(glGetTextures(52825, B), Options);
  If (Length(Options) < 2) Then Exit;
  Text := glCharsToTexts(glGetChars(B), 4, 5);

  TP := Point(-1, -1);
  For I := 0 To High(Text) Do
    For J := 0 To High(Texts) Do
      If (Pos(Texts[J], Text[I].Text) > 0) then
      begin
        TP := MiddleBox(Text[I].Bounds);
        break;
      end;

  For I := 0 To High(Options) Do
  Begin
    B.X1 := Options[I].Bounds.X1;
    B.Y1 := Options[I].Bounds.Y1;
    B.X2 := Options[I + 1].Bounds.X2;
    B.Y2 := Options[I + 1].Bounds.Y2;
    Inc(I);

    If (PointInBox(TP, B)) then
    Begin
      TP := MiddleBox(B);
      Break;
    End;
  End;

  If (TP.X <> -1 And TP.Y <> -1) Then
  Begin
    Case Action Of
      MOUSE_MOVE:  Mouse(TP.X, TP.Y, 6, 3);
      MOUSE_LEFT:  Mouse(TP.X, TP.Y, 6, 3, MOUSE_LEFT);
      MOUSE_RIGHT: Mouse(TP.X, TP.Y, 6, 3, MOUSE_RIGHT);
    End;
    Result := True;
  End;
End;

Function GL_FindNPCChatText(Text: String; Action: Integer): Boolean; overload;
Begin
  Result := GL_FindNPCChatText([Text], Action);
End;

Function GL_GetChooseOptions(var MenuBounds: TBox): glTextArray;
var
  TL, LR: glTextureArray;
Begin
  TL := glGetTextures(6120, 5921370, 5);
  LR := glGetTextures(8925, 4079167, 5);

  If ((Length(TL) < 1) Or (Length(LR) < 1)) Then Exit;
  MenuBounds := IntToBox(TL[0].Bounds.X1, TL[0].Bounds.Y2, LR[1].Bounds.X2, LR[1].Bounds.Y2);
  Result := glCharsToTexts(glGetChars(MenuBounds), 4, 7);
End;

Function GL_ChooseOption(Texts: TStringArray; Action: Integer): Boolean;
var
  MP: TPoint;
  Bounds: TBox;
  MenuBounds: TBox;
  I, II: Integer;
  Options: glTextArray;
Begin
  Result := False;
  Options := GL_GetChooseOptions(MenuBounds);
  If (Length(Options) < 1) Then Exit;

  For I := 0 To High(Texts) Do
    For II := High(Options) DownTo 0 Do
    Begin
      If (Pos(Texts[I], Options[II].Text) > 0) Then
      Begin
        Result := True;
        Bounds := Options[II].Bounds;
        GetMousePos(MP.X, MP.Y);

        Case Action Of
          MOUSE_LEFT:
                       If PointInBox(MP, Bounds) Then
                         ClickMouse(MOUSE_LEFT)
                       Else
                         MouseBox(Bounds, MOUSE_LEFT);

          MOUSE_MOVE:  If (Not PointInBox(MP, Bounds)) Then
                         MouseBox(Bounds, MOUSE_MOVE);

          MOUSE_NIL:   Begin End;

          Else
            Writeln('CLICK LEFT IS AN INVALID OPTION');
        End;
        Exit;
      End;
    End;

  If (Action <> MOUSE_NIL) Then
  Begin
    I := Max(MenuBounds.X1 + RandomRange(15, 50), 0);
    If (I = 0) Then
      I := MenuBounds.X2 + RandomRange(10, 50);
    Mouse(I, Max(MenuBounds.Y1 - RandomRange(40, 50), 0), 5, 5);
  End;
End;

Function GL_ChooseOption(Options: TStringArray): Boolean; overload;
Begin
  Result := GL_ChooseOption(Options, MOUSE_LEFT);
End;

Function GL_ChooseOption(Option: String): Boolean; overload;
Begin
  Result := GL_ChooseOption([Option], MOUSE_LEFT);
End;

Function GL_OptionsExist(Options: TStringArray; MoveMouse: Boolean): Boolean;
Begin
  If MoveMouse Then
    Result := GL_ChooseOption(Options, MOUSE_MOVE)
  Else
    Result := GL_ChooseOption(Options, MOUSE_NIL);
End;
