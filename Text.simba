{*
    This file contains all functions relating to manipulating and retrieving Text information.
    This file contains functions for the following but is not limited to:

      - Retrieving the mouse over text bounds
      - Retrieving the Chat-box bounds
      - Finding and choosing NPC options
      - Finding and choosing right click options
      - Determining whether right click options exist.
*}

{$include_once GLXCore.Simba}
{$include_once Cache.Simba}


{*
  Returns the Bounding-Box that contains the text when the mouse hovers over an
  object or interface in game from Upper left to lower right.

  Developer Info:
    8814    - TextureID of the top corners of the box.
    8936    - TextureID of the bottom corners of the box.
*}
Function GL_MouseHoverBounds: TBox;
var
  UL, BR: glTextureArray;
Begin
  UL := glGetTextures(8814);
  BR := glGetTextures(8936);
  If ((Length(UL) > 0) and (Length(BR) > 0)) then
    Result := IntToBox(UL[0].Bounds.X1, UL[0].Bounds.Y1, BR[High(BR)].Bounds.X2, BR[High(BR)].Bounds.Y2);
End;

{*
  Returns the Bounding-Box that contains the text when the mouse hovers over some interfaces from
  Upper right to lower left.

  Developer Info:
    8814    - TextureID of the top corners of the box.
    8936    - TextureID of the bottom corners of the box.
*}
Function GL_InterfaceUpTextBounds: TBox;
var
  UL, BR: glTextureArray;
Begin
  UL := glGetTextures(8814);
  BR := glGetTextures(8936);
  If ((Length(UL) >= 2) and (Length(BR) >= 2)) then
    Result := IntToBox(UL[High(UL)].Bounds.X1, UL[High(UL)].Bounds.Y1, BR[High(BR)].Bounds.X2, BR[High(BR)].Bounds.Y2);
End;

{*
  Returns the Bounding-Box that contains the text when the mouse hovers over an object
  or interface regardless of Box rendering order.

  Developer Info:
    8814    - TextureID of the top corners of the box.
    8936    - TextureID of the bottom corners of the box.
*}
Function GL_UptextBounds: TBox;
var
  UL, BR: glTextureArray;
Begin
  UL := glGetTextures(8814);
  BR := glGetTextures(8936);
  If ((Length(UL) >= 2) and (Length(BR) >= 2)) Then
  Begin
    If (UL[0].X < UL[High(UL)].X) Then
      Result := IntToBox(UL[0].Bounds.X1, UL[0].Bounds.Y1, BR[High(BR)].Bounds.X2, BR[High(BR)].Bounds.Y2)
    Else
      Result := IntToBox(UL[High(UL)].Bounds.X1, UL[High(UL)].Bounds.Y1, BR[High(BR)].Bounds.X2, BR[High(BR)].Bounds.Y2)
  End;
End;

{*
  Returns the text when the mouse hover over an object or interface.
*}
Function GL_GetMouseUpText: TStringArray;
var
  glChars: glCharArray;
Begin
  glChars := glGetChars(GL_UptextBounds);
  If (Length(glChars) > 0) then
    Result := glCharsToText(glChars, 5, 5);
End;

{*
  Returns whether the move over text contains the specified string.
*}
Function GL_IsMouseUpText(Text: String): Boolean;
Begin
  Result := Pos(Text, Implode('', GL_GetMouseUpText)) > 0;
End;

{*
  Returns whether the move over text contains ANY of the specified strings.
*}
Function GL_IsMouseUpText(Text: TStringArray): Boolean; overload;
var
  I, H: Integer;
  Uptext: String;
Begin
  Uptext := Implode('', GL_GetMouseUpText);
  H := High(Text);
  For I := 0 To H Do
    If (Pos(Text[I], UpText) > 0) Then
    Begin
      Result := True;
      Exit;
    End;
End;

{*
  Returns whether the Bounding-Box of the player's chat-box.

  Developer Info:
    3786240 -   TextureID of the chatbox background (found in the middle of the chatbox).
    24990   -   TextureID of the chat bubble found (next to the player's name in the chatbox).
*}
Function GL_ChatBounds: TBox;
var
  I, J: Integer;
  S, T: glTextureArray;
Begin
  If (Not GL_LoggedIn) Then Exit;
  If (UseSysCache) Then
  Begin
    I := SysCache.Contains(TCacheType.CACHE_CHAT);
    if (I <> -1) Then
    Begin
      Result := SysCache[I].Area;
      Exit;
    End;
  End;

  T := glGetTextures(3786240);
  S := glGetTextures(24990);
  If (Length(T) > 0 and Length(S) > 0) then
    For I := 0 To High(T) Do
      For J := 0 To High(S) Do
        If (PointInBox(Point(S[J].X, S[J].Y), T[I].Bounds)) then
        begin
          Result := T[I].Bounds;
          If (UseSysCache) Then
            SysCache.CacheChat(Result);
          Exit;
        end;
End;

{*
  Returns whether or not it was successful at finding or choosing ANY of the specified
  NPC options.

  Example Options:
    When talking to a banker, you are presented with the following 4 options:
      - I'd like to access my bank account, please.
      - I'd like to check my PIN settings.
      - I'd like to see my collection box.
      - What is this place?

  Developer Info:
    52107   - TextureID of the Left side of the NPC choose option interface.
    52825   - TextureID of the Left side of the NPC choose option interface when hovered over.
*}
Function GL_FindNPCChatText(Texts: TStringArray; Action: Integer): Boolean;
var
  B: TBox;
  TP: TPoint;
  I, J: Integer;
  Text: glTextArray;
  Options: glTextureArray;
Begin
  B := GL_ChatBounds;
  Options := glGetTextures(52107, B);
  Insert(glGetTextures(52825, B), Options);
  If (Length(Options) < 2) Then Exit;
  Text := glCharsToTexts(glGetChars(B), 4, 5);

  TP := Point(-1, -1);
  For I := 0 To High(Text) Do
    For J := 0 To High(Texts) Do
      If (Pos(Texts[J], Text[I].Text) > 0) then
      begin
        TP := MiddleBox(Text[I].Bounds);
        break;
      end;

  For I := 0 To High(Options) Do
  Begin
    B.X1 := Options[I].Bounds.X1;
    B.Y1 := Options[I].Bounds.Y1;
    B.X2 := Options[I + 1].Bounds.X2;
    B.Y2 := Options[I + 1].Bounds.Y2;
    Inc(I);

    If (PointInBox(TP, B)) then
    Begin
      TP := MiddleBox(B);
      Break;
    End;
  End;

  If (TP.X <> -1 And TP.Y <> -1) Then
  Begin
    Case Action Of
      {$IFNDEF SRLCompatibility}
      MOUSE_MOVE:  Mouse(TP.X, TP.Y, 6, 3);
      MOUSE_LEFT:  Mouse(TP.X, TP.Y, 6, 3, MOUSE_LEFT);
      MOUSE_RIGHT: Mouse(TP.X, TP.Y, 6, 3, MOUSE_RIGHT);
      {$ELSE}
      MOUSE_MOVE:  Mouse(TP);
      MOUSE_LEFT:  Mouse(TP, MOUSE_LEFT);
      MOUSE_RIGHT: Mouse(TP, MOUSE_RIGHT);
      {$ENDIF}
    End;
    Result := True;
  End;
End;

{*
  Returns whether it was successful at finding or choosing the specified NPC option.

  Example Options:
    When talking to a banker, you are presented with the following 4 options:
      - I'd like to access my bank account, please.
      - I'd like to check my PIN settings.
      - I'd like to see my collection box.
      - What is this place?
*}
Function GL_FindNPCChatText(Text: String; Action: Integer): Boolean; overload;
Begin
  Result := GL_FindNPCChatText([Text], Action);
End;

{*
  Returns a glTextArray containing the Options when an object, interface or item is right-clicked.
  Also returns the Bounding-Box of the right-click interface.

  Developer Info:
    6120      - TextureID of the top corners of the right-click interface.
    5921370   - ColourID of the top corners of the right-click interface.
    8925      - TextureID of the bottom corners of the right-click interface.
    4079167  - ColourID of the bottom corners of the right-click interface.
*}
Function GL_GetChooseOptions(var MenuBounds: TBox): glTextArray;
var
  TL, LR: glTextureArray;
Begin
  TL := glGetTextures(6120, 5921370, 5);
  LR := glGetTextures(8925, 4079167, 5);

  If ((Length(TL) < 1) Or (Length(LR) < 1)) Then Exit;
  MenuBounds := IntToBox(TL[0].Bounds.X1, TL[0].Bounds.Y2, LR[1].Bounds.X2, LR[1].Bounds.Y2);
  Result := glCharsToTexts(glGetChars(MenuBounds), 5, 7);
End;

{*
  Returns whether it successfully found or executed the specified action
  for ANY of the specified options in the right-click interface.
  If an option is not found, the interface is closed and false is returned.
*}
Function GL_ChooseOption(Texts: TStringArray; Action: Integer): Boolean;
var
  MP: TPoint;
  Bounds: TBox;
  MenuBounds: TBox;
  I, II: Integer;
  Options: glTextArray;
Begin
  Result := False;
  Options := GL_GetChooseOptions(MenuBounds);
  If (Length(Options) < 1) Then Exit;

  For I := 0 To High(Texts) Do
    For II := High(Options) DownTo 0 Do
    Begin
      If (Pos(Texts[I], Options[II].Text) > 0) Then
      Begin
        Result := True;
        Bounds := Options[II].Bounds;
        GetMousePos(MP.X, MP.Y);

        Case Action Of
          MOUSE_LEFT:
                       If PointInBox(MP, Bounds) Then
                         ClickMouse(MOUSE_LEFT)
                       Else
                         MouseBox(Bounds, MOUSE_LEFT);

          MOUSE_MOVE:  If (Not PointInBox(MP, Bounds)) Then
                         MouseBox(Bounds, MOUSE_MOVE);

          MOUSE_NONE:   Begin End;

          Else
            Writeln('CLICK LEFT IS AN INVALID OPTION');
        End;
        Exit;
      End;
    End;

  If (Action <> MOUSE_NONE) Then
  Begin
    I := Max(MenuBounds.X1 + RandomRange(15, 50), 0);
    If (I = 0) Then
      I := MenuBounds.X2 + RandomRange(10, 50);
    {$IFNDEF SRLCompatibility}
    Mouse(I, Max(MenuBounds.Y1 - RandomRange(40, 50), 0), 5, 5);
    {$ELSE}
    Mouse(Point(I, Max(MenuBounds.Y1 - RandomRange(40, 50), 0)));
    {$ENDIF}
  End;
End;

{*
  Returns whether it successfully found and clicked ANY of the specified
  options in the right-click interface.
*}
Function GL_ChooseOption(Options: TStringArray): Boolean; overload;
Begin
  Result := GL_ChooseOption(Options, MOUSE_LEFT);
End;

{*
  Returns whether it successfully found and clicked the specified option
  in the right-click interface.
*}
Function GL_ChooseOption(Option: String): Boolean; overload;
Begin
  Result := GL_ChooseOption([Option], MOUSE_LEFT);
End;

{*
  Returns whether or not the specified options exist in the right-click interface.
*}
Function GL_OptionsExist(Options: TStringArray; MoveMouse: Boolean): Boolean;
Begin
  If MoveMouse Then
    Result := GL_ChooseOption(Options, MOUSE_MOVE)
  Else
    Result := GL_ChooseOption(Options, MOUSE_NONE);
End;
